<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gem | This is Kun's Blog.]]></title>
  <link href="http://thisiskun.github.com/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://thisiskun.github.com/"/>
  <updated>2013-03-12T13:47:09+08:00</updated>
  <id>http://thisiskun.github.com/</id>
  <author>
    <name><![CDATA[Arthur Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capistrano]]></title>
    <link href="http://thisiskun.github.com/blog/2013/02/25/capistrano/"/>
    <updated>2013-02-25T23:23:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2013/02/25/capistrano</id>
    <content type="html"><![CDATA[<p>最近研究 Capistrano 来着，在此记录心得体会。</p>

<h3>什么是 Capistrano</h3>

<p>Capistrano 是一个可在多台服务器上并行命令的工具，主要用于部署 Web 应用。</p>

<h3>为什么要用 Capistrano</h3>

<p>Capistrano 分化并自动化部署过程，让部署变得更简单，由于使用 Ruby，
所以 DevOps 实践起来也更容易。</p>

<h3>Capistrano 的具体使用</h3>

<h4>基本概念</h4>

<ul>
<li><p>SSH</p>

<p>Capistrano 通过 SSH 协议在服务器上执行命令，通过 ssh-keygen 和 ssh-copy-id
可以更方便的使用 SSH。</p></li>
<li><p>SCM</p>

<p>SCM，跟据实际情况可以是 git，svn 等，指定代码仓库，Capistrano
部署内容将在此获取。</p></li>
<li><p>Roles</p>

<p>一般的有 web，app，db，可以指定不同服务器，所以可以让指定的 task
在特定服务器上执行。</p></li>
<li><p>Tasks</p>

<p>要执行的任务，用法跟 Rake 相近。</p></li>
<li><p>Callbacks</p>

<p>有 <code>after</code> <code>before</code>，可让 task 于其他 task 执行前后执行。</p></li>
</ul>


<h3>实施步骤</h3>

<ul>
<li><p>安装 capistrano gem</p></li>
<li><p>capify .</p>

<p>生成 Capfile config/deploy.rb 两个文件</p></li>
<li><p>cap deploy:migrations</p>

<p>部署并启动服务</p></li>
<li><p>cap deploy</p>

<p>更新代码后再次部署</p></li>
<li><p>更多 <code>cap -T</code></p></li>
</ul>


<p>config/deploy.rb 实例</p>

<p>``` ruby config/deploy.rb
set :user, "deployer"
set :domain, "foobar.com"
set :application, "foobar"</p>

<p>require 'bundler/capistrano'</p>

<h1>RVM</h1>

<p>require 'rvm/capistrano'
set :rvm_ruby_string, "1.9.3-p385"
set :rvm_type, :user</p>

<h1>filepath</h1>

<p>set :repository,  "git@github.com:thisiskun/foobar.git"
set :deploy_to, "/home/#{user}/#{domain}"</p>

<p>role :web, domain
role :app, domain
role :db, domain, :primary => true</p>

<p>set :deploy_via, :remote_cache
set :scm, 'git'
set :branch, 'master'
set :scm_verbose, true
set :use_sudo, false
set :rails_env, :production</p>

<p>set :scm, :git</p>

<h1>add uploads dir</h1>

<p>set :uploads_dirs, %w(public/uploads)
set :shared_children, fetch(:shared_children) + fetch(:uploads_dirs)</p>

<h1>add config to shared_dirs</h1>

<p>set :shared_children, fetch(:shared_children) + "config"</p>

<h1>if you want to clean up old releases on each deploy uncomment this:</h1>

<p>after "deploy:restart", "deploy:cleanup"</p>

<p>namespace :deploy do</p>

<p>  task :start do ; end
  task :stop do ; end
  task :restart, :roles => :app, :except => { :no_release => true } do</p>

<pre><code>run "#{try_sudo} touch #{File.join(current_path,'tmp','restart.txt')}"
</code></pre>

<p>  end</p>

<p>  namespace :deploy do</p>

<pre><code>namespace :assets do
  desc "Precompile assets on local machine and upload them to the server."
  task :precompile, :roles =&gt; :web, :except =&gt; {:no_release =&gt; true} do
    run_locally "bundle exec rake assets:precompile"
    find_servers_for_task(current_task).each do |server|
      run_locally "rsync -vr --exclude='.DS_Store' public/assets #{user}@#{server.host}:#{shared_path}/"
    end
  end
end
</code></pre>

<p>  end</p>

<p>  desc "Update remote database and settings file with local copy"
  task :sync_yaml do</p>

<pre><code>%[database.yml settings.yml].each do |file|
  run_locally("rsync config/#{file} #{user}@#{domain}:#{shared_path}/config/#{file}")
  run "ln -nfs #{shared_path}/config/#{file}
  #{release_path}/config/#{file}"
end
</code></pre>

<p>  end
end</p>

<p>before "bundle:install", "deploy:sync_yaml"
```</p>

<h3>实际部署中遇到的问题</h3>

<h4>RVM</h4>

<p>如果服务器上用 RVM 安装的 ruby，需要做如下配置</p>

<p><code>ruby Gemfile
gem 'rvm-capistrano'
</code></p>

<p>``` ruby config/deploy.rb
require 'rvm/capistrano'</p>

<h1>RVM</h1>

<p>require 'rvm/capistrano'
set :rvm_ruby_string, "1.9.3-p385"
set :rvm_type, :user
```</p>

<h4>deploy 完代码后执行 <code>bundle install</code></h4>

<p><code>ruby config/deploy.rb
require 'bundler/capistrano'
</code></p>

<p>看代码，可知是在 <code>deploy:update_code</code> 后执行的。</p>

<h4>assets precompile</h4>

<p>在整个部署过程中，最耗时间的应该就是 assets precompile 这一步了，
而且性能消耗比较高，你可能不会想在服务器上做，所以比较好的解决方案就是，</p>

<ul>
<li>本地 assets precompile 后上传服务器</li>
</ul>


<p><code>bash .gitignore
public/assets
</code></p>

<p><code>ruby Capfile
load 'deploy/assets'
</code></p>

<p>覆写 assets:precompile task</p>

<p>``` ruby config/deploy.rb
namespace :deploy do
  namespace :assets do</p>

<pre><code>desc "Precompile assets on local machine and upload them to the server."
task :precompile, :roles =&gt; web, :except =&gt; {:no_release =&gt; true} do
  run_locally "bundle exec rake assets:precompile"
  find_servers_for_task(current_task).each do |server|
    run_locally "rsync -vr --exclude='.DS_Store' public/assets #{user}@#{server.host}:#{shared_path}/"
  end
end
</code></pre>

<p>  end
end
```</p>

<ul>
<li>提高 assets:precompile 的速度</li>
</ul>


<p><code>ruby Gemfile
group :assets do
  gem 'turbo-sprockets-rails3'
end
</code></p>

<h4>config/database.yml 敏感数据问题</h4>

<p>切忌把这些包含敏感数据的配置文件加入到版本控制工具中去</p>

<p><code>bash .gitignore
config/database.yml
</code></p>

<p>定义上传的 task</p>

<p>``` ruby config/deploy.rb
  desc "Update remote database and settings file with local copy"
  task :sync_yaml do</p>

<pre><code>run_locally("rsync config/database.yml #{user}@#{domain}:#{latest_release}/config/database.yml")
run_locally("rsync config/settings.yml #{user}@#{domain}:#{latest_release}/config/settings.yml")
</code></pre>

<p>  end</p>

<p>  before "bundle:install", "deploy:sync_yaml"
```</p>

<h4>上传文件问题</h4>

<p>``` bash .gitignore</p>

<h1>where your uploaded files localed</h1>

<p>public/uploads
```</p>

<p>``` ruby config/deploy.rb</p>

<h1>add uploads dir</h1>

<p>set :uploads_dirs, %w(public/uploads)
set :shared_children, fetch(:shared_children) + fetch(:uploads_dirs)
```</p>

<p>因为修改了 <code>shared_dirs</code>，所以要先执行 deploy:setup。</p>

<p>关于 <code>shared_dirs</code>，这里实际上放置了一些各个 releases 之间共享的文件，
像是系统生成的 log，pid 等，Capistrano 会在更新代码后生成 soft link，
生成的 assets 文件也是放在这里的，避免之前的版本不能访问的问题。
所以上传文件目录放在共享下也是比较合理的。</p>

<hr />

<p>参考：</p>

<ul>
<li><a href="http://pragprog.com/book/rails4/agile-web-development-with-rails">Agile Web Development with Rails</a></li>
<li><a href="http://pragprog.com/book/rails4/agile-web-development-with-rails">一次搞懂 Assets Pipeline</a></li>
<li><a href="http://stackoverflow.com/a/9710542/1115359">stackoverflow Carrierwave files with Capistrano</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一日一Gem - bundler]]></title>
    <link href="http://thisiskun.github.com/blog/2012/11/16/bundler/"/>
    <updated>2012-11-16T15:20:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/11/16/bundler</id>
    <content type="html"><![CDATA[<h2>什么是 Bundlder</h2>

<p>Bundler 是一个解决 ruby 程序间依赖性的工具。</p>

<h2>Bundler 命令行</h2>

<p>Bundler 命令行有是 <code>bundle</code> 这个工具，用法有：</p>

<p>```bash
check      -- Determine whether the requirements for your application are installed
config     -- Specify and read configuration options for bundler
console    -- Start an IRB session in the context of the current bundle
exec       -- Execute a script in the context of the current bundle</p>

<h1>非常有用的命令，比如系统装了不同版本的 rake 而要要 Gemfile 中指定的版本执行时</h1>

<p>gem        -- Create a simple gem, suitable for development with bundler</p>

<h1>前文有提到过的用 Bundler 建 Gem 包</h1>

<p>help       -- Describe available tasks or one specific task
init       -- Generate a simple Gemfile, placed in the current directory</p>

<h1>init Gemfile</h1>

<p>install    -- Install the gems specified by the Gemfile or Gemfile.lock
list       -- Show all of the gems in the current bundle
open       -- Open an installed gem in the editor</p>

<h1>编辑器里打开 Gem，可以在 rc file 里指定 export EDIROT=vim</h1>

<p>package    -- Package the .gem files required by your application</p>

<h1>打包 Gem 到 vendor/cache，部署到 produciton 时很有用</h1>

<p>show       -- Show the source location of a particular gem in the bundle</p>

<h1>显示 Gem 路径，可以 cd <code>bundle show gem</code></h1>

<p>update     -- Update dependencies to their latest versions
viz        -- Generate a visual representation of your dependencies
```</p>

<h3>bundle install vs bundle update</h3>

<p><code>bundle install</code> 或者简短命令 <code>bundle</code> 安装 Gem，加上
<code>--local</code> 可以在使用 本地 Gem 或 <code>vendor/cache</code> 中的 Gem。</p>

<p>bundle update 会把 Gem 升级到符合 <code>Gemfile</code>
约束的最新版，直接下达这个命令的话不利于排错，
一般用 <code>bundle update xxx</code>。</p>

<p><code>bundle install</code> 安装的 Gem 版本是在 <code>Gemfile.lock</code> 中指定的，</p>

<p><code>bundle update</code> 则会忽略 <code>Gemfile.lock</code>。</p>

<h2>Gemfile</h2>

<ul>
<li>source</li>
</ul>


<p>``` ruby
source 'http://ruby.taobao.org/'</p>

<h1>源设置，天朝用这个快点</h1>

<p>```</p>

<ul>
<li>gem</li>
</ul>


<p><code>ruby
gem "nokogiri"
gem "rails", "3.0.0.beta3"
gem "rack",  "&gt;=1.0"
gem "thin",  "~&gt;1.1"
</code></p>

<blockquote><p>Most of the version specifiers, like <code>&gt;= 1.0</code>, are self-explanatory. The
specifier <code>~&gt;</code> has a special meaning, best shown by example. <code>~&gt; 2.0.3</code> is
identical to <code>&gt;= 2.0.3</code> and <code>&lt; 2.1</code>. <code>~&gt; 2.1</code> is identical to <code>&gt;= 2.1</code> and
<code>&lt;3.0</code>. <code>~&gt; 2.2.beta</code> will match prerelease versions like <code>2.2.beta.12</code>.</p></blockquote>

<ul>
<li>:require</li>
</ul>


<p><code>ruby
gem "rspec", :require =&gt; "spec"
</code></p>

<p>当文件名跟包名不同时使用。</p>

<ul>
<li>:git :branch :ref</li>
</ul>


<p>指定 Gem 源。</p>

<ul>
<li>:path</li>
</ul>


<p>指定 Gem 路径。</p>

<ul>
<li>group</li>
</ul>


<p>``` ruby
gem "wirble", :group => :development
gem "ruby-debug", :group => [:development, :test]</p>

<p>group :test do
  gem "rspec"
end
```</p>

<p><code>bash
bundle install --without test development
</code></p>

<p>指定要忽略安装的 <code>group</code>，Bundler 会在 <code>.bundle/config</code> 中记住这个选项。</p>

<h2>Gemfile.lock</h2>

<p><code>Gemfile.lock</code> 中描述了实际使用了哪个版本的软件包，如果别人 clone 了你的项目，
那么他 <code>bundle install</code> 的时候就是按照 这个文件来的。</p>

<hr />

<h2>参考：</h2>

<ul>
<li><a href="http://gembundler.com/">Bundler</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一日一Gem - Pry]]></title>
    <link href="http://thisiskun.github.com/blog/2012/09/05/a-gem-a-day-pry/"/>
    <updated>2012-09-05T00:53:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/09/05/a-gem-a-day-pry</id>
    <content type="html"><![CDATA[<p>本文主要介绍 Pry 的使用。</p>

<h2>什么是 Pry</h2>

<p>Pry 是一个功能非常强大的工具，目前简单的理解为一个增强版的 irb 和强大的 debug
工具。</p>

<p>在了解 Pry 之前，先了解下什么是 REPL。</p>

<p>REPL 是 read-eval-print loop，是一种交互式的编程环境，可以用简单的 ruby
代码表示：</p>

<p><code>ruby test.rb
loop { p eval gets }
</code></p>

<p>执行这个文件：</p>

<p>```irb
1 + 1
2</p>

<p>puts "hello"
"hello"
nil
```</p>

<p>可以看到，使用 REPL 非常的简单优雅，可以马上看到执行结果以及返回值，
REPL 对于学习一门新的语言来说是非常直观的。</p>

<h2>安装以及配置</h2>

<p>安装 pry：</p>

<p><code>bash
gem install pry pry-doc
</code></p>

<p>跟 irb 以及其他 *nix 软件一样，你可以使用 rc 文件配置： <code>~/.pryc</code> 。</p>

<h2>功能介绍</h2>

<p>打开一个终端，输入 <code>pry</code>，就开始了。</p>

<p>输入 <code>help</code> 可以查看可用的命令了，如果要获取某个命令的详细帮助，可以在后面加
<code>-h</code> 选项。</p>

<p>主要的命令有：</p>

<ul>
<li><p><strong>cd</strong></p>

<p>改变当前上下文，既是改变 <code>self</code> 对象。
打开一个 <code>pry</code>，实际上我现在是在 <code>main</code> 对象上，在 pry 的 prompt
上也可以看到当前 <code>self</code>。
<code>cd Array</code> 之后，<code>self</code> 就变为 <code>Array</code> 了。</p></li>
<li><p><strong>ls</strong></p>

<p>列出 <code>self</code> 的方法，实例变量，本地变量等。
如果不指定对象就列出 <code>self</code> 的。</p></li>
<li><p><strong>show-doc</strong></p>

<p>显示注释文档。</p></li>
<li><p><strong>show-method</strong></p>

<p>显示代码。</p></li>
<li><p><strong>edit-method</strong></p>

<p>打开编辑器，编辑指定的方法。
可以直接修改在 <code>pry</code> 中定义的方法，免去重复录入的烦恼，
或者在 debug 的过程中直接修改方法，方便调试。</p></li>
<li><p><strong>.shell-command</strong></p>

<p>在 pry 中直接执行 shell command</p></li>
<li><p><strong>debug</strong></p>

<p>在需要处加入 <code>binding.pry</code> 即可设置断点，可以用 pry-debugger 这个 gem
来增强。</p></li>
</ul>


<p>当然这里只是列出了一些比较常用的功能，
pry 最让我欣喜的一点就是通过 <code>cd</code> <code>ls</code> 这两个命令，
可以很好的了解 ruby 的对象模型，
对 ruby 元编程的学习也很有好处。</p>

<h2>结合 rails 使用</h2>

<h3>rails console</h3>

<p>既然 pry 这么好用，那么当然子 rails 中也要使用它咯。</p>

<p><code>ruby Gemfile
group :development do
  gem 'pry-rails'
end
</code></p>

<p>打开 rails console，就可以在 rails 下用 pry 了。</p>

<h3>debug</h3>

<p>断点处加上 <code>binding.pry</code>，<code>rails s</code> 启动服务，通过浏览器访问，
这时程序会在断点处停住，debug 完了后 <code>exit-all</code> 即可继续执行。</p>

<hr />

<h2>小结</h2>

<p>pry 目前已经衍生出了很多的增强项目，如 pry-debugger，pry-remote 等等，
有时间再补充吧。</p>

<h2>参考</h2>

<ul>
<li><p><a href="http://pryrepl.org">官网</a></p></li>
<li><p><a href="https://github.com/pry/pry">pry gitub</a></p></li>
<li><p><a href="http://railscasts.com/episodes/280-pry-with-rails">railscasts</a></p></li>
<li><p><a href="http://blog.xdite.net/posts/2012/08/12/pry-the-new-debugger/">xdite的blog</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
