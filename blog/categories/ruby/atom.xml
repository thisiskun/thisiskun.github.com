<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | This is Kun's Blog.]]></title>
  <link href="http://thisiskun.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://thisiskun.github.com/"/>
  <updated>2012-12-24T19:51:52+08:00</updated>
  <id>http://thisiskun.github.com/</id>
  <author>
    <name><![CDATA[Arthur Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BDD]]></title>
    <link href="http://thisiskun.github.com/blog/2012/12/17/bdd/"/>
    <updated>2012-12-17T20:02:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/12/17/bdd</id>
    <content type="html"><![CDATA[<p>最近学习测试来着。</p>

<h3>什么是 BDD</h3>

<p>BDD 即为 Behavior Driven Development，是 TDD（Test Driven Development）的一种延伸，
是一种软件开发的方法论。</p>

<p>实践起来就是在写开发代码之前，先根据需求写好测试用例，
然后跑用例（必须 fail），然后再开发实际代码跑通测试，
测试通过之后再重构代码，然后再跑测试。。。</p>

<p>如此的一个迭代过程。</p>

<h3>为什么我要学 BDD</h3>

<ul>
<li><p>社区开发所推崇，必须了解，有朝一日可能会用上</p></li>
<li><p>因为 spec 的良好可阅读性，其实也是作为规范文档的存在，可以作为开发的依据</p></li>
<li><p>面向接口开发，可以写出接口良好的代码</p></li>
</ul>


<h3>Cucumber 与 Rspec</h3>

<p>目前我的理解是 Cucumber 是针对高层次的测试，如 acceptance test，
Rspec 更适合做 unittest。</p>

<p>Cucumber 的特点就是写出来的用例就算是非开发人员也可以看懂，
着重于宏观层面的功能实现，对软件产品会有更好的了解。</p>

<p>Rspec 可以做更加底层的测试，代码不同分层的测试。
当然 Rspec 也可以做 acceptance test，
不过这点我更加倾向于用 Cucumber，因为我是一个 ”人“。</p>

<h3>抛开 BDD，测试的必要性</h3>

<p>不管是测试先行，还是上车后补票，测试都是必不可少的：</p>

<ul>
<li><p>specification 之存在，我要写什么样的软件</p></li>
<li><p>确保没有破坏原有的代码</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM]]></title>
    <link href="http://thisiskun.github.com/blog/2012/11/16/rvm/"/>
    <updated>2012-11-16T20:49:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/11/16/rvm</id>
    <content type="html"><![CDATA[<p>今天看了一下 RVM 的官网，又发现不少有趣的东西。</p>

<h2>gemset</h2>

<p>这里要说的是 <code>global</code> 这个 gemset，安装在这里的 Gem 对每个 gemset
都是可用的哦。</p>

<p>还有就是 <code>~/.rvm/gemsets/default.gems</code> 和 <code>~/.rvm/gemsets/global.gems</code>
这两个配置文件，把需要的 Gem 写在里面，以后安装的每个 ruby
版本都会自动安装上这些 Gem 了。</p>

<h2>rvmrc</h2>

<p>这里指的是 project 的 <code>.rvmrc</code> 文件，在 Octopress 里你就可以发现它的身影了，</p>

<p><code>ruby .rvmrc
rvm use 1.9.2
</code></p>

<h2>do</h2>

<p>测试版本兼容性的，有了这个实在太方便了</p>

<p><code>ruby
∴ rvm [all|all-gemsets|&lt;ruby&gt;,...|&lt;path&gt;] [--verbose|--summary|--yaml|--json] do &lt;command&gt; ...
∴ rvm in &lt;path&gt; do &lt;some-command&gt; ...
</code></p>

<p>一个简单的例子</p>

<p><code>ruby test.rb
h = {name: 'kun'}
puts h
</code></p>

<p><code>bash
rvm all --verbose do ruby test.rb
</code></p>

<p>``` ruby
ruby-1.9.2-p320: ruby 1.9.2p320 (2012-04-20 revision 35421) [i686-linux]
{:name=>"Arthur"}
ruby-1.9.3-p327: ruby 1.9.3p327 (2012-11-10 revision 37606) [i686-linux]
{:name=>"Arthur"}
ruby-1.9.3-p286: ruby 1.9.3p286 (2012-10-12 revision 37165) [i686-linux]
{:name=>"Arthur"}
ruby-1.8.7-p371: ruby 1.8.7 (2012-10-12 patchlevel 371) [i686-linux]
test.rb:4: odd number list for Hash
h = {name: 'Arthur'}</p>

<pre><code>      ^
</code></pre>

<p>test.rb:4: syntax error, unexpected ':', expecting '}'
h = {name: 'Arthur'}</p>

<pre><code>      ^
</code></pre>

<p>test.rb:4: syntax error, unexpected '}', expecting $end
```</p>

<p>另外还可以通过 Benchmark 来测试不同版本 ruby 的性能。</p>

<hr />

<h2>参考</h2>

<ul>
<li><a href="https://rvm.io/">rvm</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一日一Gem - bundler]]></title>
    <link href="http://thisiskun.github.com/blog/2012/11/16/bundler/"/>
    <updated>2012-11-16T15:20:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/11/16/bundler</id>
    <content type="html"><![CDATA[<h2>什么是 Bundlder</h2>

<p>Bundler 是一个解决 ruby 程序间依赖性的工具。</p>

<h2>Bundler 命令行</h2>

<p>Bundler 命令行有是 <code>bundle</code> 这个工具，用法有：</p>

<p>```bash
check      -- Determine whether the requirements for your application are installed
config     -- Specify and read configuration options for bundler
console    -- Start an IRB session in the context of the current bundle
exec       -- Execute a script in the context of the current bundle</p>

<h1>非常有用的命令，比如系统装了不同版本的 rake 而要要 Gemfile 中指定的版本执行时</h1>

<p>gem        -- Create a simple gem, suitable for development with bundler</p>

<h1>前文有提到过的用 Bundler 建 Gem 包</h1>

<p>help       -- Describe available tasks or one specific task
init       -- Generate a simple Gemfile, placed in the current directory</p>

<h1>init Gemfile</h1>

<p>install    -- Install the gems specified by the Gemfile or Gemfile.lock
list       -- Show all of the gems in the current bundle
open       -- Open an installed gem in the editor</p>

<h1>编辑器里打开 Gem，可以在 rc file 里指定 export EDIROT=vim</h1>

<p>package    -- Package the .gem files required by your application</p>

<h1>打包 Gem 到 vendor/cache，部署到 produciton 时很有用</h1>

<p>show       -- Show the source location of a particular gem in the bundle</p>

<h1>显示 Gem 路径，可以 cd <code>bundle show gem</code></h1>

<p>update     -- Update dependencies to their latest versions
viz        -- Generate a visual representation of your dependencies
```</p>

<h3>bundle install vs bundle update</h3>

<p><code>bundle install</code> 或者简短命令 <code>bundle</code> 安装 Gem，加上
<code>--local</code> 可以在使用 本地 Gem 或 <code>vendor/cache</code> 中的 Gem。</p>

<p>bundle update 会把 Gem 升级到符合 <code>Gemfile</code>
约束的最新版，直接下达这个命令的话不利于排错，
一般用 <code>bundle update xxx</code>。</p>

<p><code>bundle install</code> 安装的 Gem 版本是在 <code>Gemfile.lock</code> 中指定的，</p>

<p><code>bundle update</code> 则会忽略 <code>Gemfile.lock</code>。</p>

<h2>Gemfile</h2>

<ul>
<li>source</li>
</ul>


<p>``` ruby
source 'http://ruby.taobao.org/'</p>

<h1>源设置，天朝用这个快点</h1>

<p>```</p>

<ul>
<li>gem</li>
</ul>


<p><code>ruby
gem "nokogiri"
gem "rails", "3.0.0.beta3"
gem "rack",  "&gt;=1.0"
gem "thin",  "~&gt;1.1"
</code></p>

<blockquote><p>Most of the version specifiers, like <code>&gt;= 1.0</code>, are self-explanatory. The
specifier <code>~&gt;</code> has a special meaning, best shown by example. <code>~&gt; 2.0.3</code> is
identical to <code>&gt;= 2.0.3</code> and <code>&lt; 2.1</code>. <code>~&gt; 2.1</code> is identical to <code>&gt;= 2.1</code> and
<code>&lt;3.0</code>. <code>~&gt; 2.2.beta</code> will match prerelease versions like <code>2.2.beta.12</code>.</p></blockquote>

<ul>
<li>:require</li>
</ul>


<p><code>ruby
gem "rspec", :require =&gt; "spec"
</code></p>

<p>当文件名跟包名不同时使用。</p>

<ul>
<li>:git :branch :ref</li>
</ul>


<p>指定 Gem 源。</p>

<ul>
<li>:path</li>
</ul>


<p>指定 Gem 路径。</p>

<ul>
<li>group</li>
</ul>


<p>``` ruby
gem "wirble", :group => :development
gem "ruby-debug", :group => [:development, :test]</p>

<p>group :test do
  gem "rspec"
end
```</p>

<p><code>bash
bundle install --without test development
</code></p>

<p>指定要忽略安装的 <code>group</code>，Bundler 会在 <code>.bundle/config</code> 中记住这个选项。</p>

<h2>Gemfile.lock</h2>

<p><code>Gemfile.lock</code> 中描述了实际使用了哪个版本的软件包，如果别人 clone 了你的项目，
那么他 <code>bundle install</code> 的时候就是按照 这个文件来的。</p>

<hr />

<h2>参考：</h2>

<ul>
<li><a href="http://gembundler.com/">Bundler</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一日一Gem - Pry]]></title>
    <link href="http://thisiskun.github.com/blog/2012/09/05/a-gem-a-day-pry/"/>
    <updated>2012-09-05T00:53:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/09/05/a-gem-a-day-pry</id>
    <content type="html"><![CDATA[<p>本文主要介绍 Pry 的使用。</p>

<h2>什么是 Pry</h2>

<p>Pry 是一个功能非常强大的工具，目前简单的理解为一个增强版的 irb 和强大的 debug
工具。</p>

<p>在了解 Pry 之前，先了解下什么是 REPL。</p>

<p>REPL 是 read-eval-print loop，是一种交互式的编程环境，可以用简单的 ruby
代码表示：</p>

<p><code>ruby test.rb
loop { p eval gets }
</code></p>

<p>执行这个文件：</p>

<p>```irb
1 + 1
2</p>

<p>puts "hello"
"hello"
nil
```</p>

<p>可以看到，使用 REPL 非常的简单优雅，可以马上看到执行结果以及返回值，
REPL 对于学习一门新的语言来说是非常直观的。</p>

<h2>安装以及配置</h2>

<p>安装 pry：</p>

<p><code>bash
gem install pry pry-doc
</code></p>

<p>跟 irb 以及其他 *nix 软件一样，你可以使用 rc 文件配置： <code>~/.pryc</code> 。</p>

<h2>功能介绍</h2>

<p>打开一个终端，输入 <code>pry</code>，就开始了。</p>

<p>输入 <code>help</code> 可以查看可用的命令了，如果要获取某个命令的详细帮助，可以在后面加
<code>-h</code> 选项。</p>

<p>主要的命令有：</p>

<ul>
<li><p><strong>cd</strong></p>

<p>改变当前上下文，既是改变 <code>self</code> 对象。
打开一个 <code>pry</code>，实际上我现在是在 <code>main</code> 对象上，在 pry 的 prompt
上也可以看到当前 <code>self</code>。
<code>cd Array</code> 之后，<code>self</code> 就变为 <code>Array</code> 了。</p></li>
<li><p><strong>ls</strong></p>

<p>列出 <code>self</code> 的方法，实例变量，本地变量等。
如果不指定对象就列出 <code>self</code> 的。</p></li>
<li><p><strong>show-doc</strong></p>

<p>显示注释文档。</p></li>
<li><p><strong>show-method</strong></p>

<p>显示代码。</p></li>
<li><p><strong>edit-method</strong></p>

<p>打开编辑器，编辑指定的方法。
可以直接修改在 <code>pry</code> 中定义的方法，免去重复录入的烦恼，
或者在 debug 的过程中直接修改方法，方便调试。</p></li>
<li><p><strong>.shell-command</strong></p>

<p>在 pry 中直接执行 shell command</p></li>
<li><p><strong>debug</strong></p>

<p>在需要处加入 <code>binding.pry</code> 即可设置断点，可以用 pry-debugger 这个 gem
来增强。</p></li>
</ul>


<p>当然这里只是列出了一些比较常用的功能，
pry 最让我欣喜的一点就是通过 <code>cd</code> <code>ls</code> 这两个命令，
可以很好的了解 ruby 的对象模型，
对 ruby 元编程的学习也很有好处。</p>

<h2>结合 rails 使用</h2>

<h3>rails console</h3>

<p>既然 pry 这么好用，那么当然子 rails 中也要使用它咯。</p>

<p><code>ruby Gemfile
group :development do
  gem 'pry-rails'
end
</code></p>

<p>打开 rails console，就可以在 rails 下用 pry 了。</p>

<h3>debug</h3>

<p>断点处加上 <code>binding.pry</code>，<code>rails s</code> 启动服务，通过浏览器访问，
这时程序会在断点处停住，debug 完了后 <code>exit-all</code> 即可继续执行。</p>

<hr />

<h2>小结</h2>

<p>pry 目前已经衍生出了很多的增强项目，如 pry-debugger，pry-remote 等等，
有时间再补充吧。</p>

<h2>参考</h2>

<ul>
<li><p><a href="http://pryrepl.org">官网</a></p></li>
<li><p><a href="https://github.com/pry/pry">pry gitub</a></p></li>
<li><p><a href="http://railscasts.com/episodes/280-pry-with-rails">railscasts</a></p></li>
<li><p><a href="http://blog.xdite.net/posts/2012/08/12/pry-the-new-debugger/">xdite的blog</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Gems]]></title>
    <link href="http://thisiskun.github.com/blog/2012/04/06/ruby-gems/"/>
    <updated>2012-04-06T14:54:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/04/06/ruby-gems</id>
    <content type="html"><![CDATA[<p>这里是我对rubygems的学习记录和自己的一些理解。</p>

<h2>什么是rubygems gems</h2>

<p><a href="https://rubygems.org/">rubygems</a>是ruby的一个包管理系统，gem是ruby的软件包。</p>

<p>上篇日志讲到了<code>$LOAD_PATH</code>，其实rubygems的实现也是通过<code>$LOAD_PATH</code>的。</p>

<p><code>ruby
 irb(main):002:0&gt; pp $:
["/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/i686-linux",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1/i686-linux",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/i686-linux"]
</code></p>

<p>我们来<code>require</code>一个gem</p>

<p><code>ruby
irb(main):003:0&gt; require 'rdiscount'
=&gt; true
irb(main):004:0&gt; pp $:
["/home/kun/.rvm/gems/ruby-1.9.2-p290@rails3.2.1/gems/rdiscount-1.6.8/lib",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/i686-linux",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1/i686-linux",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/i686-linux"]
</code></p>

<p>如上，<code>rdiscount</code>这个gem的lib目录已经加入到<code>$LOAD_PATH</code>中了，可以很方便的<code>require</code>了。</p>

<h2>建立自己的gem</h2>

<h3>使用bundler</h3>

<p>这里我用<code>bundler</code>来生成gem结构，其他实现不太清楚。</p>

<p>生成gem结构：</p>

<p><code>bash
bundle gem hola
</code></p>

<p>目录结构：</p>

<p>``` bash
.
└── hola</p>

<pre><code>├── lib
│   ├── hola
│   │   └── version.rb
│   └── hola.rb
├── Gemfile
├── hola.gemspec
├── LICENSE
├── Rakefile
└── README.md
</code></pre>

<p>```</p>

<p><code>bundler</code>生成的gem结构已经很符合gem的约定规范了，
而且还自动建立个git repo，
用起来很舒服。</p>

<h3>lib/</h3>

<p>lib目录是我们的代码所在目录，当我们install了这个gem，
当我们<code>require 'hola'</code>时，就是<code>require</code>了这里的<code>hola.rb</code>，
所以需要的其他文件，都要在<code>hola.rb</code>里面<code>require</code>进来。</p>

<h3>Gemfile</h3>

<p><code>Gemfile</code>是bundler的配置文件</p>

<p>``` ruby Gemfile
source 'https://rubygems.org'</p>

<h1>Specify your gem's dependencies in hola.gemspec</h1>

<p>gemspec
```</p>

<p>如提示，我们应该把软件包依赖写在<code>hola.gemspec</code>里面。</p>

<h3>hola.gemspec</h3>

<p>gem描述文件</p>

<p>``` ruby hola.gemspec</p>

<h1>-<em>- encoding: utf-8 -</em>-</h1>

<p>require File.expand_path('../lib/hola/version', <strong>FILE</strong>)</p>

<p>Gem::Specification.new do |gem|
  gem.authors       = ["Arthur Chen"]
  gem.email         = ["chenchaokun@gmail.com"]
  gem.description   = %q{TODO: Write a gem description}
  gem.summary       = %q{TODO: Write a gem summary}
  gem.homepage      = ""</p>

<p>  gem.files         = <code>git ls-files</code>.split($)
  gem.executables   = gem.files.grep(%r{<sup>bin/}).map{</sup> |f| File.basename(f) }
  gem.test_files    = gem.files.grep(%r{<sup>(test|spec|features)/})</sup>
  gem.name          = "hola"
  gem.require_paths = ["lib"]
  gem.version       = Hola::VERSION
end
```</p>

<p>具体看<a href="http://guides.rubygems.org/specification-reference/">官方文档</a>就好了。</p>

<h3>Rakefile</h3>

<p>``` ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>require "bundler/gem_tasks"
```</p>

<p>``` bash</p>

<h1>rake -T</h1>

<p>rake build    # Build hola-0.0.1.gem into the pkg directory
rake install  # Build and install hola-0.0.1.gem into system gems
rake release  # Create tag v0.0.1 and build and push hola-0.0.1.gem to Rubygems
```</p>

<p>三个好用的task。</p>

<h3>添加可执行脚本</h3>

<p>按照惯例，可执行脚本放在<code>bin/</code>目录下，脚本命名一般跟gem一样，
如<code>bin/hola</code>，
ruby构建命令行工具比较流行的有<code>rake</code>和<code>thor</code>，
后续应该有相关的博文。</p>

<h3>test</h3>

<p>unittest或者rspec，相应的测试代码放在<code>test/</code> <code>sepc/</code>下。</p>

<h2>publishing</h2>

<p>先<code>git commit</code>，
也可以<code>git remote add</code>将项目托管到github。</p>

<p><code>bash
rake install
rake release
</code></p>

<p>这样就可以把你的gem发布到<a href="https://rubygems.org/">rubygems.org</a>上了，
记得注册。。。
api key，
以及检查gem名是否可用。</p>

<h2>最后</h2>

<p>现在你<code>gem list -r your_gem</code>，就可以看到你的gem了，
全球各地的黑客们就可以很愉快的下载使用你的gem了，
你为开源世界又贡献了一个helloworld，
是不是有一股满足感油然而生呢：）。</p>

<p>参考：</p>

<ul>
<li><a href="http://guides.rubygems.org/" title="rubygems guides">rubygems guides</a></li>
<li><a href="http://railscasts.com/episodes/245-new-gem-with-bundler" title="railcasts">railscasts: new gem with bundler</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
