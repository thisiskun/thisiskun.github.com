<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | This is Kun's Blog.]]></title>
  <link href="http://thisiskun.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://thisiskun.github.com/"/>
  <updated>2012-08-15T02:15:44+08:00</updated>
  <id>http://thisiskun.github.com/</id>
  <author>
    <name><![CDATA[Kun Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Gems]]></title>
    <link href="http://thisiskun.github.com/blog/2012/04/06/ruby-gems/"/>
    <updated>2012-04-06T14:54:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/04/06/ruby-gems</id>
    <content type="html"><![CDATA[<p>这里是我对rubygems的学习记录和自己的一些理解。</p>

<h2>什么是rubygems gems</h2>

<p><a href="https://rubygems.org/">rubygems</a>是ruby的一个包管理系统，gem是ruby的软件包。</p>

<p>上篇日志讲到了<code>$LOAD_PATH</code>，其实rubygems的实现也是通过<code>$LOAD_PATH</code>的。</p>

<p><code>ruby
 irb(main):002:0&gt; pp $:
["/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/i686-linux",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1/i686-linux",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/i686-linux"]
</code></p>

<p>我们来<code>require</code>一个gem</p>

<p><code>ruby
irb(main):003:0&gt; require 'rdiscount'
=&gt; true
irb(main):004:0&gt; pp $:
["/home/kun/.rvm/gems/ruby-1.9.2-p290@rails3.2.1/gems/rdiscount-1.6.8/lib",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/i686-linux",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1/i686-linux",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/i686-linux"]
</code></p>

<p>如上，<code>rdiscount</code>这个gem的lib目录已经加入到<code>$LOAD_PATH</code>中了，可以很方便的<code>require</code>了。</p>

<h2>建立自己的gem</h2>

<h3>使用bundler</h3>

<p>这里我用<code>bundler</code>来生成gem结构，其他实现不太清楚。</p>

<p>生成gem结构：</p>

<p><code>bash
bundle gem hola
</code></p>

<p>目录结构：</p>

<p>``` bash
.
└── hola</p>

<pre><code>├── lib
│   ├── hola
│   │   └── version.rb
│   └── hola.rb
├── Gemfile
├── hola.gemspec
├── LICENSE
├── Rakefile
└── README.md
</code></pre>

<p>```</p>

<p><code>bundler</code>生成的gem结构已经很符合gem的约定规范了，
而且还自动建立个git repo，
用起来很舒服。</p>

<h3>lib/</h3>

<p>lib目录是我们的代码所在目录，当我们install了这个gem，
当我们<code>require 'hola'</code>时，就是<code>require</code>了这里的<code>hola.rb</code>，
所以需要的其他文件，都要在<code>hola.rb</code>里面<code>require</code>进来。</p>

<h3>Gemfile</h3>

<p><code>Gemfile</code>是bundler的配置文件</p>

<p>``` ruby Gemfile
source 'https://rubygems.org'</p>

<h1>Specify your gem's dependencies in hola.gemspec</h1>

<p>gemspec
```</p>

<p>如提示，我们应该把软件包依赖写在<code>hola.gemspec</code>里面。</p>

<h3>hola.gemspec</h3>

<p>gem描述文件</p>

<p>``` ruby hola.gemspec</p>

<h1>-<em>- encoding: utf-8 -</em>-</h1>

<p>require File.expand_path('../lib/hola/version', <strong>FILE</strong>)</p>

<p>Gem::Specification.new do |gem|
  gem.authors       = ["Arthur Chen"]
  gem.email         = ["chenchaokun@gmail.com"]
  gem.description   = %q{TODO: Write a gem description}
  gem.summary       = %q{TODO: Write a gem summary}
  gem.homepage      = ""</p>

<p>  gem.files         = <code>git ls-files</code>.split($)
  gem.executables   = gem.files.grep(%r{<sup>bin/}).map{</sup> |f| File.basename(f) }
  gem.test_files    = gem.files.grep(%r{<sup>(test|spec|features)/})</sup>
  gem.name          = "hola"
  gem.require_paths = ["lib"]
  gem.version       = Hola::VERSION
end
```</p>

<p>具体看<a href="http://guides.rubygems.org/specification-reference/">官方文档</a>就好了。</p>

<h3>Rakefile</h3>

<p>``` ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>require "bundler/gem_tasks"
```</p>

<p>``` bash</p>

<h1>rake -T</h1>

<p>rake build    # Build hola-0.0.1.gem into the pkg directory
rake install  # Build and install hola-0.0.1.gem into system gems
rake release  # Create tag v0.0.1 and build and push hola-0.0.1.gem to Rubygems
```</p>

<p>三个好用的task。</p>

<h3>添加可执行脚本</h3>

<p>按照惯例，可执行脚本放在<code>bin/</code>目录下，脚本命名一般跟gem一样，
如<code>bin/hola</code>，
ruby构建命令行工具比较流行的有<code>rake</code>和<code>thor</code>，
后续应该有相关的博文。</p>

<h3>test</h3>

<p>unittest或者rspec，相应的测试代码放在<code>test/</code> <code>sepc/</code>下。</p>

<h2>publishing</h2>

<p>先<code>git commit</code>，
也可以<code>git remote add</code>将项目托管到github。</p>

<p><code>bash
rake install
rake release
</code></p>

<p>这样就可以把你的gem发布到<a href="https://rubygems.org/">rubygems.org</a>上了，
记得注册。。。
api key，
以及检查gem名是否可用。</p>

<h2>最后</h2>

<p>现在你<code>gem list -r your_gem</code>，就可以看到你的gem了，
全球各地的黑客们就可以很愉快的下载使用你的gem了，
你为开源世界又贡献了一个helloworld，
是不是有一股满足感油然而生呢：）。</p>

<p>参考：</p>

<ul>
<li><a href="http://guides.rubygems.org/" title="rubygems guides">rubygems guides</a></li>
<li><a href="http://railscasts.com/episodes/245-new-gem-with-bundler" title="railcasts">railscasts: new gem with bundler</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby的$LOAD_PATH]]></title>
    <link href="http://thisiskun.github.com/blog/2012/03/30/rubys-load-path/"/>
    <updated>2012-03-30T00:22:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/03/30/rubys-load-path</id>
    <content type="html"><![CDATA[<p>在ruby中，当你<code>require</code>一个文件的时候，
ruby去哪里寻找这个文件呢？
答案就是<code>$LOAD_PATH</code>了。
<code>$LOAD_PATH</code>还有另外一种perl风格的别名<code>$:</code>，
而且貌似这种写法更加常见，
虽然让人摸不着头脑就是了。</p>

<p>假设在<code>~/test</code>路径下，
有<code>foo.rb</code>和<code>bar.rb</code>，
在ruby 1.9.2 之前的版本里，
执行脚本的目录是加入到<code>$LOAD_PATH</code>里的，
所以你可以</p>

<p>``` ruby</p>

<h1>bar.rb</h1>

<p>require 'foo'
```</p>

<p>ruby 1.9.2 之后的版本里，
出于安全的考虑，
不再包含当前目录，
所以上面的写法会出错，
所以相应的代码应该改为</p>

<p>``` ruby</p>

<h1>bar.rb</h1>

<p>require './foo'</p>

<h1>or</h1>

<p>require_relative 'foo'
```</p>

<p>其中<code>require './foo'</code>是当前目录相对文件的路径，
<code>require_relative</code>的意思是，
<strong>包含这句代码的文件与目标文件的相对路径</strong>。
下面是<a href="http://stackoverflow.com/questions/4333286/ruby-require-vs-require-relative-best-practice-to-workaround-running-in-both">stackoverflow</a>上的一段兼容1.9.2之前版本的代码</p>

<p>``` ruby
unless Kernel.respond_to?(:require_relative)
  module Kernel</p>

<pre><code>def require_relative(path)
  require File.join(File.dirname(caller[0]), path.to_str)
end
</code></pre>

<p>  end
end
```</p>

<hr />

<p>回到<code>$LOAD_PATH</code>，让我们看看它的值，</p>

<p><code>ruby
["/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/i686-linux",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1/i686-linux",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1",
 "/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/i686-linux"]
</code></p>

<p>下面的方法可以将目录动态加入<code>$LOAD_PATH</code></p>

<p><code>ruby
$:.unshift File.expand_path("../lib", __FILE__)
</code></p>

<p>因为ruby以第一个找到的为准，
所以用unshift，可以提高些许效率。</p>

<hr />

<p>最后，一点小发现，
rspec是会自动加载<code>lib/</code>和<code>spec/</code>的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress!]]></title>
    <link href="http://thisiskun.github.com/blog/2012/03/22/hello-octopress/"/>
    <updated>2012-03-22T22:42:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/03/22/hello-octopress</id>
    <content type="html"><![CDATA[<p>Hello Octopress!</p>

<p>This is my first post!</p>

<p>关闭输入法的自动嵌入才能才gvim里正常输入中文，迟来的中文问候，囧～～</p>

<p>你好，Octopress！</p>
]]></content>
  </entry>
  
</feed>
