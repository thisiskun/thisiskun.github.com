<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[This is Kun's Blog.]]></title>
  <link href="http://thisiskun.github.com/atom.xml" rel="self"/>
  <link href="http://thisiskun.github.com/"/>
  <updated>2013-03-15T14:33:18+08:00</updated>
  <id>http://thisiskun.github.com/</id>
  <author>
    <name><![CDATA[Arthur Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capistrano]]></title>
    <link href="http://thisiskun.github.com/blog/2013/02/25/capistrano/"/>
    <updated>2013-02-25T23:23:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2013/02/25/capistrano</id>
    <content type="html"><![CDATA[<p>最近研究 Capistrano 来着，在此记录心得体会。</p>

<h3>什么是 Capistrano</h3>

<p>Capistrano 是一个可在多台服务器上并行命令的工具，主要用于部署 Web 应用。</p>

<h3>为什么要用 Capistrano</h3>

<p>Capistrano 分化并自动化部署过程，让部署变得更简单，由于使用 Ruby，
所以 DevOps 实践起来也更容易。</p>

<h3>Capistrano 的具体使用</h3>

<h4>基本概念</h4>

<ul>
<li><p>SSH</p>

<p>Capistrano 通过 SSH 协议在服务器上执行命令，通过 ssh-keygen 和 ssh-copy-id
可以更方便的使用 SSH。</p></li>
<li><p>SCM</p>

<p>SCM，跟据实际情况可以是 git，svn 等，指定代码仓库，Capistrano
部署内容将在此获取。</p></li>
<li><p>Roles</p>

<p>一般的有 web，app，db，可以指定不同服务器，所以可以让指定的 task
在特定服务器上执行。</p></li>
<li><p>Tasks</p>

<p>要执行的任务，用法跟 Rake 相近。</p></li>
<li><p>Callbacks</p>

<p>有 <code>after</code> <code>before</code>，可让 task 于其他 task 执行前后执行。</p></li>
</ul>


<h3>实施步骤</h3>

<ul>
<li><p>安装 capistrano gem</p></li>
<li><p>capify .</p>

<p>生成 Capfile config/deploy.rb 两个文件</p></li>
<li><p>cap deploy:migrations</p>

<p>部署并启动服务</p></li>
<li><p>cap deploy</p>

<p>更新代码后再次部署</p></li>
<li><p>更多 <code>cap -T</code></p></li>
</ul>


<p>config/deploy.rb 实例</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s2">&quot;deployer&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="s2">&quot;foobar.com&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;foobar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/capistrano&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># RVM</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rvm/capistrano&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rvm_ruby_string</span><span class="p">,</span> <span class="s2">&quot;1.9.3-p385&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rvm_type</span><span class="p">,</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># filepath</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;git@github.com:thisiskun/foobar.git&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="n">domain</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="n">domain</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span> <span class="n">domain</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="s1">&#39;git&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;master&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm_verbose</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rails_env</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># add uploads dir</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:uploads_dirs</span><span class="p">,</span> <span class="sx">%w(public/uploads)</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:shared_children</span><span class="p">,</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:shared_children</span><span class="p">)</span> <span class="o">+</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:uploads_dirs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># add config to shared_dirs</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:shared_children</span><span class="p">,</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:shared_children</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;config&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># if you want to clean up old releases on each deploy uncomment this:</span>
</span><span class='line'><span class="n">after</span> <span class="s2">&quot;deploy:restart&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:cleanup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:start</span> <span class="k">do</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:stop</span> <span class="k">do</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">try_sudo</span><span class="si">}</span><span class="s2"> touch </span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current_path</span><span class="p">,</span><span class="s1">&#39;tmp&#39;</span><span class="p">,</span><span class="s1">&#39;restart.txt&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">namespace</span> <span class="ss">:assets</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">desc</span> <span class="s2">&quot;Precompile assets on local machine and upload them to the server.&quot;</span>
</span><span class='line'>      <span class="n">task</span> <span class="ss">:precompile</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:web</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">}</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">run_locally</span> <span class="s2">&quot;bundle exec rake assets:precompile&quot;</span>
</span><span class='line'>        <span class="n">find_servers_for_task</span><span class="p">(</span><span class="n">current_task</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="o">|</span>
</span><span class='line'>          <span class="n">run_locally</span> <span class="s2">&quot;rsync -vr --exclude=&#39;.DS_Store&#39; public/assets </span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="n">server</span><span class="o">.</span><span class="n">host</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Update remote database and settings file with local copy&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:sync_yaml</span> <span class="k">do</span>
</span><span class='line'>    <span class="sx">%[database.yml settings.yml]</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">run_locally</span><span class="p">(</span><span class="s2">&quot;rsync config/</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">run</span> <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2"></span>
</span><span class='line'><span class="s2">      </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">before</span> <span class="s2">&quot;bundle:install&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:sync_yaml&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>实际部署中遇到的问题</h3>

<h4>RVM</h4>

<p>如果服务器上用 RVM 安装的 ruby，需要做如下配置</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rvm-capistrano&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rvm/capistrano&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># RVM</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rvm/capistrano&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rvm_ruby_string</span><span class="p">,</span> <span class="s2">&quot;1.9.3-p385&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rvm_type</span><span class="p">,</span> <span class="ss">:user</span>
</span></code></pre></td></tr></table></div></figure>


<h4>deploy 完代码后执行 <code>bundle install</code></h4>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/capistrano&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>看代码，可知是在 <code>deploy:update_code</code> 后执行的。</p>

<h4>assets precompile</h4>

<p>在整个部署过程中，最耗时间的应该就是 assets precompile 这一步了，
而且性能消耗比较高，你可能不会想在服务器上做，所以比较好的解决方案就是，</p>

<ul>
<li>本地 assets precompile 后上传服务器</li>
</ul>


<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>public/assets
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Capfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="s1">&#39;deploy/assets&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>覆写 assets:precompile task</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="ss">:assets</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">desc</span> <span class="s2">&quot;Precompile assets on local machine and upload them to the server.&quot;</span>
</span><span class='line'>    <span class="n">task</span> <span class="ss">:precompile</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="n">web</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">}</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">run_locally</span> <span class="s2">&quot;bundle exec rake assets:precompile&quot;</span>
</span><span class='line'>      <span class="n">find_servers_for_task</span><span class="p">(</span><span class="n">current_task</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="o">|</span>
</span><span class='line'>        <span class="n">run_locally</span> <span class="s2">&quot;rsync -vr --exclude=&#39;.DS_Store&#39; public/assets </span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="n">server</span><span class="o">.</span><span class="n">host</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>提高 assets:precompile 的速度</li>
</ul>


<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:assets</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;turbo-sprockets-rails3&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>config/database.yml 敏感数据问题</h4>

<p>切忌把这些包含敏感数据的配置文件加入到版本控制工具中去</p>

<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>config/database.yml
</span></code></pre></td></tr></table></div></figure>


<p>定义上传的 task</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Update remote database and settings file with local copy&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:sync_yaml</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run_locally</span><span class="p">(</span><span class="s2">&quot;rsync config/database.yml </span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">latest_release</span><span class="si">}</span><span class="s2">/config/database.yml&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">run_locally</span><span class="p">(</span><span class="s2">&quot;rsync config/settings.yml </span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">latest_release</span><span class="si">}</span><span class="s2">/config/settings.yml&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="s2">&quot;bundle:install&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:sync_yaml&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>上传文件问题</h4>

<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># where your uploaded files localed</span>
</span><span class='line'>public/uploads
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># add uploads dir</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:uploads_dirs</span><span class="p">,</span> <span class="sx">%w(public/uploads)</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:shared_children</span><span class="p">,</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:shared_children</span><span class="p">)</span> <span class="o">+</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:uploads_dirs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为修改了 <code>shared_dirs</code>，所以要先执行 deploy:setup。</p>

<p>关于 <code>shared_dirs</code>，这里实际上放置了一些各个 releases 之间共享的文件，
像是系统生成的 log，pid 等，Capistrano 会在更新代码后生成 soft link，
生成的 assets 文件也是放在这里的，避免之前的版本不能访问的问题。
所以上传文件目录放在共享下也是比较合理的。</p>

<hr />

<p>参考：</p>

<ul>
<li><a href="http://pragprog.com/book/rails4/agile-web-development-with-rails">Agile Web Development with Rails</a></li>
<li><a href="http://pragprog.com/book/rails4/agile-web-development-with-rails">一次搞懂 Assets Pipeline</a></li>
<li><a href="http://stackoverflow.com/a/9710542/1115359">stackoverflow Carrierwave files with Capistrano</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux keyboard tricks]]></title>
    <link href="http://thisiskun.github.com/blog/2012/12/24/linux-keyboard-tricks/"/>
    <updated>2012-12-24T18:24:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/12/24/linux-keyboard-tricks</id>
    <content type="html"><![CDATA[<p>在此记录 linux 命令行的一些实用小技巧，使用的环境是 zsh + oh-my-zsh，
对 bash 部分不兼容。</p>

<h2>命令行输入</h2>

<h3>移动和编辑</h3>

<ul>
<li><code>ctrl_a</code> 跳到行首</li>
<li><code>ctrl_e</code> 跳到行末</li>
<li><code>ctrl_l</code> 清屏</li>
<li><code>ctrl_u</code> 清除整行</li>
<li><code>ctrl_k</code> 光标后内容</li>
<li><code>ctrl_w</code> 清除光标前一个单词</li>
<li><code>alt_d</code>  清除光标后一个单词</li>
<li><code>alt_t</code>  光标前两个单词互换位置</li>
</ul>


<p><strong>实用例子</strong></p>

<p><code>alt_d</code> 相比 <code>ctrl_w</code>
这个命令用的应该比较少，不过如果一长串命令前面不小心加上了
<code>sudo</code>，最快的方式就是
<code>ctrl_a</code> + <code>alt_d</code> 再 enter</p>

<h3>历史相关</h3>

<ul>
<li><code>!!</code> 上一个命令</li>
<li><code>!!-n</code> 倒数第n个命令</li>
<li><code>alt_.</code> 历史命令的最后一个单词</li>
<li><code>alt_n</code> <code>alt_.</code> 历史命令的倒数第n个单词</li>
<li><code>!*</code> 上个命令的全部参数</li>
<li><code>ctrl_p</code> 向前导航历史命令</li>
<li><code>ctrl_n</code> 向后导航历史命令</li>
<li><code>ctrl_r</code> 历史命令检索，按下后输入之前命令的片段，动态补全，回车确认，<code>ctrl_c</code>
取消</li>
<li><code>foobar key_up</code> 输入 <code>foobar</code> 后按向上键可以搜索 <code>foobar</code> 开头的命令</li>
<li><code>foobar key_down</code> 同上</li>
</ul>


<p><strong>注意</strong> 截至本文发布时，zsh 要使用 key_up key_down 功能必须在 <code>.zshenv</code>
中加入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">DEBIAN_PREVENT_KEYBOARD_CHANGES</span><span class="o">=</span>yes
</span></code></pre></td></tr></table></div></figure>


<p><strong>实用例子</strong></p>

<p><code>sudo !!</code> 使用时遇到无权限时可快速使用 sudo</p>

<h3>表达式</h3>

<ul>
<li>花括号表达式</li>
<li>算数表达式</li>
<li>命令表达式</li>
<li>双引号和单引号</li>
</ul>


<p><strong>实用例子</strong></p>

<ul>
<li>重命名，超好用有没有</li>
</ul>


<p><code>mv afuckinglongpath.{css,scss}</code></p>

<ul>
<li>跳转命令所在目录</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> <span class="sb">`</span>whick rake<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>双引号转义，单引号不转义</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$PATH&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;$PATH&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>导航</h2>

<p><code>cd -</code> 跳转上一个目录</p>

<p><code>d</code> 最近的目录</p>

<p><code>cd +n</code> 跳转上面列出的目录，直接输入 <code>n</code> 也可以</p>

<h2>其他</h2>

<p>多用 alias，你会发现 oh-my-zsh 里面很多插件其实就是 alias。</p>

<p>当然，不要忘了我们的 <code>tab</code>。</p>

<hr />

<h2>参考</h2>

<ul>
<li><a href="http://linuxcommand.org">the linux command</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDD]]></title>
    <link href="http://thisiskun.github.com/blog/2012/12/17/bdd/"/>
    <updated>2012-12-17T20:02:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/12/17/bdd</id>
    <content type="html"><![CDATA[<p>最近学习测试来着。</p>

<h3>什么是 BDD</h3>

<p>BDD 即为 Behavior Driven Development，是 TDD（Test Driven Development）的一种延伸，
是一种软件开发的方法论。</p>

<p>实践起来就是在写开发代码之前，先根据需求写好测试用例，
然后跑用例（必须 fail），然后再开发实际代码跑通测试，
测试通过之后再重构代码，然后再跑测试。。。</p>

<p>如此的一个迭代过程。</p>

<h3>为什么我要学 BDD</h3>

<ul>
<li><p>社区开发所推崇，必须了解，有朝一日可能会用上</p></li>
<li><p>因为 spec 的良好可阅读性，其实也是作为规范文档的存在，可以作为开发的依据</p></li>
<li><p>面向接口开发，可以写出接口良好的代码</p></li>
</ul>


<h3>Cucumber 与 Rspec</h3>

<p>目前我的理解是 Cucumber 是针对高层次的测试，如 acceptance test，
Rspec 更适合做 unittest。</p>

<p>Cucumber 的特点就是写出来的用例就算是非开发人员也可以看懂，
着重于宏观层面的功能实现，对软件产品会有更好的了解。</p>

<p>Rspec 可以做更加底层的测试，代码不同分层的测试。
当然 Rspec 也可以做 acceptance test，
不过这点我更加倾向于用 Cucumber，因为我是一个 ”人“。</p>

<h3>抛开 BDD，测试的必要性</h3>

<p>不管是测试先行，还是上车后补票，测试都是必不可少的：</p>

<ul>
<li><p>specification 之存在，我要写什么样的软件</p></li>
<li><p>确保没有破坏原有的代码</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM]]></title>
    <link href="http://thisiskun.github.com/blog/2012/11/16/rvm/"/>
    <updated>2012-11-16T20:49:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/11/16/rvm</id>
    <content type="html"><![CDATA[<p>今天看了一下 RVM 的官网，又发现不少有趣的东西。</p>

<h2>gemset</h2>

<p>这里要说的是 <code>global</code> 这个 gemset，安装在这里的 Gem 对每个 gemset
都是可用的哦。</p>

<p>还有就是 <code>~/.rvm/gemsets/default.gems</code> 和 <code>~/.rvm/gemsets/global.gems</code>
这两个配置文件，把需要的 Gem 写在里面，以后安装的每个 ruby
版本都会自动安装上这些 Gem 了。</p>

<h2>rvmrc</h2>

<p>这里指的是 project 的 <code>.rvmrc</code> 文件，在 Octopress 里你就可以发现它的身影了，</p>

<figure class='code'><figcaption><span>.rvmrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rvm</span> <span class="n">use</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>do</h2>

<p>测试版本兼容性的，有了这个实在太方便了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">∴</span> <span class="n">rvm</span> <span class="o">[</span><span class="n">all</span><span class="o">|</span><span class="n">all</span><span class="o">-</span><span class="n">gemsets</span><span class="o">|&lt;</span><span class="n">ruby</span><span class="o">&gt;</span><span class="p">,</span><span class="o">.</span><span class="n">.</span><span class="o">.|&lt;</span><span class="n">path</span><span class="o">&gt;]</span> <span class="o">[--</span><span class="n">verbose</span><span class="o">|--</span><span class="n">summary</span><span class="o">|--</span><span class="n">yaml</span><span class="o">|--</span><span class="n">json</span><span class="o">]</span> <span class="k">do</span> <span class="o">&lt;</span><span class="n">command</span><span class="o">&gt;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="err">∴</span> <span class="n">rvm</span> <span class="k">in</span> <span class="o">&lt;</span><span class="n">path</span><span class="o">&gt;</span> <span class="k">do</span> <span class="o">&lt;</span><span class="n">some</span><span class="o">-</span><span class="n">command</span><span class="o">&gt;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个简单的例子</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;kun&#39;</span><span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">h</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm all --verbose <span class="k">do </span>ruby test.rb
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="o">-</span><span class="n">p320</span><span class="p">:</span> <span class="n">ruby</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p320</span> <span class="p">(</span><span class="mi">2012</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">20</span> <span class="n">revision</span> <span class="mi">35421</span><span class="p">)</span> <span class="o">[</span><span class="n">i686</span><span class="o">-</span><span class="n">linux</span><span class="o">]</span>
</span><span class='line'><span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;Arthur&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">ruby</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p327</span><span class="p">:</span> <span class="n">ruby</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p327</span> <span class="p">(</span><span class="mi">2012</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">10</span> <span class="n">revision</span> <span class="mi">37606</span><span class="p">)</span> <span class="o">[</span><span class="n">i686</span><span class="o">-</span><span class="n">linux</span><span class="o">]</span>
</span><span class='line'><span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;Arthur&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">ruby</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p286</span><span class="p">:</span> <span class="n">ruby</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p286</span> <span class="p">(</span><span class="mi">2012</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">12</span> <span class="n">revision</span> <span class="mi">37165</span><span class="p">)</span> <span class="o">[</span><span class="n">i686</span><span class="o">-</span><span class="n">linux</span><span class="o">]</span>
</span><span class='line'><span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;Arthur&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">ruby</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">7</span><span class="o">-</span><span class="n">p371</span><span class="p">:</span> <span class="n">ruby</span> <span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">7</span> <span class="p">(</span><span class="mi">2012</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">12</span> <span class="n">patchlevel</span> <span class="mi">371</span><span class="p">)</span> <span class="o">[</span><span class="n">i686</span><span class="o">-</span><span class="n">linux</span><span class="o">]</span>
</span><span class='line'><span class="nb">test</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">4</span><span class="p">:</span> <span class="n">odd</span> <span class="n">number</span> <span class="n">list</span> <span class="k">for</span> <span class="no">Hash</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Arthur&#39;</span><span class="p">}</span>
</span><span class='line'>          <span class="o">^</span>
</span><span class='line'><span class="nb">test</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">4</span><span class="p">:</span> <span class="n">syntax</span> <span class="n">error</span><span class="p">,</span> <span class="n">unexpected</span> <span class="s1">&#39;:&#39;</span><span class="p">,</span> <span class="n">expecting</span> <span class="s1">&#39;}&#39;</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Arthur&#39;</span><span class="p">}</span>
</span><span class='line'>          <span class="o">^</span>
</span><span class='line'><span class="nb">test</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">4</span><span class="p">:</span> <span class="n">syntax</span> <span class="n">error</span><span class="p">,</span> <span class="n">unexpected</span> <span class="s1">&#39;}&#39;</span><span class="p">,</span> <span class="n">expecting</span> <span class="vg">$end</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外还可以通过 Benchmark 来测试不同版本 ruby 的性能。</p>

<hr />

<h2>参考</h2>

<ul>
<li><a href="https://rvm.io/">rvm</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一日一Gem - bundler]]></title>
    <link href="http://thisiskun.github.com/blog/2012/11/16/bundler/"/>
    <updated>2012-11-16T15:20:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/11/16/bundler</id>
    <content type="html"><![CDATA[<h2>什么是 Bundlder</h2>

<p>Bundler 是一个解决 ruby 程序间依赖性的工具。</p>

<h2>Bundler 命令行</h2>

<p>Bundler 命令行有是 <code>bundle</code> 这个工具，用法有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>check      -- Determine whether the requirements <span class="k">for </span>your application are installed
</span><span class='line'>config     -- Specify and <span class="nb">read </span>configuration options <span class="k">for </span>bundler
</span><span class='line'>console    -- Start an IRB session in the context of the current bundle
</span><span class='line'><span class="nb">exec</span>       -- Execute a script in the context of the current bundle
</span><span class='line'><span class="c"># 非常有用的命令，比如系统装了不同版本的 rake 而要要 Gemfile 中指定的版本执行时</span>
</span><span class='line'>gem        -- Create a simple gem, suitable <span class="k">for </span>development with bundler
</span><span class='line'><span class="c"># 前文有提到过的用 Bundler 建 Gem 包</span>
</span><span class='line'><span class="nb">help</span>       -- Describe available tasks or one specific task
</span><span class='line'>init       -- Generate a simple Gemfile, placed in the current directory
</span><span class='line'><span class="c"># init Gemfile</span>
</span><span class='line'>install    -- Install the gems specified by the Gemfile or Gemfile.lock
</span><span class='line'>list       -- Show all of the gems in the current bundle
</span><span class='line'>open       -- Open an installed gem in the editor
</span><span class='line'><span class="c"># 编辑器里打开 Gem，可以在 rc file 里指定 export EDIROT=vim</span>
</span><span class='line'>package    -- Package the .gem files required by your application
</span><span class='line'><span class="c"># 打包 Gem 到 vendor/cache，部署到 produciton 时很有用</span>
</span><span class='line'>show       -- Show the <span class="nb">source </span>location of a particular gem in the bundle
</span><span class='line'><span class="c"># 显示 Gem 路径，可以 cd `bundle show gem`</span>
</span><span class='line'>update     -- Update dependencies to their latest versions
</span><span class='line'>viz        -- Generate a visual representation of your dependencies
</span></code></pre></td></tr></table></div></figure>


<h3>bundle install vs bundle update</h3>

<p><code>bundle install</code> 或者简短命令 <code>bundle</code> 安装 Gem，加上
<code>--local</code> 可以在使用 本地 Gem 或 <code>vendor/cache</code> 中的 Gem。</p>

<p>bundle update 会把 Gem 升级到符合 <code>Gemfile</code>
约束的最新版，直接下达这个命令的话不利于排错，
一般用 <code>bundle update xxx</code>。</p>

<p><code>bundle install</code> 安装的 Gem 版本是在 <code>Gemfile.lock</code> 中指定的，</p>

<p><code>bundle update</code> 则会忽略 <code>Gemfile.lock</code>。</p>

<h2>Gemfile</h2>

<ul>
<li>source</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;http://ruby.taobao.org/&#39;</span>
</span><span class='line'><span class="c1"># 源设置，天朝用这个快点</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>gem</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;nokogiri&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;rails&quot;</span><span class="p">,</span> <span class="s2">&quot;3.0.0.beta3&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;rack&quot;</span><span class="p">,</span>  <span class="s2">&quot;&gt;=1.0&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;thin&quot;</span><span class="p">,</span>  <span class="s2">&quot;~&gt;1.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Most of the version specifiers, like <code>&gt;= 1.0</code>, are self-explanatory. The
specifier <code>~&gt;</code> has a special meaning, best shown by example. <code>~&gt; 2.0.3</code> is
identical to <code>&gt;= 2.0.3</code> and <code>&lt; 2.1</code>. <code>~&gt; 2.1</code> is identical to <code>&gt;= 2.1</code> and
<code>&lt;3.0</code>. <code>~&gt; 2.2.beta</code> will match prerelease versions like <code>2.2.beta.12</code>.</p></blockquote>

<ul>
<li>:require</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;rspec&quot;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="s2">&quot;spec&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当文件名跟包名不同时使用。</p>

<ul>
<li>:git :branch :ref</li>
</ul>


<p>指定 Gem 源。</p>

<ul>
<li>:path</li>
</ul>


<p>指定 Gem 路径。</p>

<ul>
<li>group</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;wirble&quot;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:development</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;ruby-debug&quot;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;rspec&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install --without <span class="nb">test </span>development
</span></code></pre></td></tr></table></div></figure>


<p>指定要忽略安装的 <code>group</code>，Bundler 会在 <code>.bundle/config</code> 中记住这个选项。</p>

<h2>Gemfile.lock</h2>

<p><code>Gemfile.lock</code> 中描述了实际使用了哪个版本的软件包，如果别人 clone 了你的项目，
那么他 <code>bundle install</code> 的时候就是按照 这个文件来的。</p>

<hr />

<h2>参考：</h2>

<ul>
<li><a href="http://gembundler.com/">Bundler</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一日一Gem - Pry]]></title>
    <link href="http://thisiskun.github.com/blog/2012/09/05/a-gem-a-day-pry/"/>
    <updated>2012-09-05T00:53:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/09/05/a-gem-a-day-pry</id>
    <content type="html"><![CDATA[<p>本文主要介绍 Pry 的使用。</p>

<h2>什么是 Pry</h2>

<p>Pry 是一个功能非常强大的工具，目前简单的理解为一个增强版的 irb 和强大的 debug
工具。</p>

<p>在了解 Pry 之前，先了解下什么是 REPL。</p>

<p>REPL 是 read-eval-print loop，是一种交互式的编程环境，可以用简单的 ruby
代码表示：</p>

<figure class='code'><figcaption><span>test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">loop</span> <span class="p">{</span> <span class="nb">p</span> <span class="nb">eval</span> <span class="nb">gets</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行这个文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">1 + 1</span>
</span><span class='line'><span class="go">2</span>
</span><span class='line'>
</span><span class='line'><span class="go">puts &quot;hello&quot;</span>
</span><span class='line'><span class="go">&quot;hello&quot;</span>
</span><span class='line'><span class="go">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，使用 REPL 非常的简单优雅，可以马上看到执行结果以及返回值，
REPL 对于学习一门新的语言来说是非常直观的。</p>

<h2>安装以及配置</h2>

<p>安装 pry：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install pry pry-doc
</span></code></pre></td></tr></table></div></figure>


<p>跟 irb 以及其他 *nix 软件一样，你可以使用 rc 文件配置： <code>~/.pryc</code> 。</p>

<h2>功能介绍</h2>

<p>打开一个终端，输入 <code>pry</code>，就开始了。</p>

<p>输入 <code>help</code> 可以查看可用的命令了，如果要获取某个命令的详细帮助，可以在后面加
<code>-h</code> 选项。</p>

<p>主要的命令有：</p>

<ul>
<li><p><strong>cd</strong></p>

<p>改变当前上下文，既是改变 <code>self</code> 对象。
打开一个 <code>pry</code>，实际上我现在是在 <code>main</code> 对象上，在 pry 的 prompt
上也可以看到当前 <code>self</code>。
<code>cd Array</code> 之后，<code>self</code> 就变为 <code>Array</code> 了。</p></li>
<li><p><strong>ls</strong></p>

<p>列出 <code>self</code> 的方法，实例变量，本地变量等。
如果不指定对象就列出 <code>self</code> 的。</p></li>
<li><p><strong>show-doc</strong></p>

<p>显示注释文档。</p></li>
<li><p><strong>show-method</strong></p>

<p>显示代码。</p></li>
<li><p><strong>edit-method</strong></p>

<p>打开编辑器，编辑指定的方法。
可以直接修改在 <code>pry</code> 中定义的方法，免去重复录入的烦恼，
或者在 debug 的过程中直接修改方法，方便调试。</p></li>
<li><p><strong>.shell-command</strong></p>

<p>在 pry 中直接执行 shell command</p></li>
<li><p><strong>debug</strong></p>

<p>在需要处加入 <code>binding.pry</code> 即可设置断点，可以用 pry-debugger 这个 gem
来增强。</p></li>
</ul>


<p>当然这里只是列出了一些比较常用的功能，
pry 最让我欣喜的一点就是通过 <code>cd</code> <code>ls</code> 这两个命令，
可以很好的了解 ruby 的对象模型，
对 ruby 元编程的学习也很有好处。</p>

<h2>结合 rails 使用</h2>

<h3>rails console</h3>

<p>既然 pry 这么好用，那么当然子 rails 中也要使用它咯。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pry-rails&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>打开 rails console，就可以在 rails 下用 pry 了。</p>

<h3>debug</h3>

<p>断点处加上 <code>binding.pry</code>，<code>rails s</code> 启动服务，通过浏览器访问，
这时程序会在断点处停住，debug 完了后 <code>exit-all</code> 即可继续执行。</p>

<hr />

<h2>小结</h2>

<p>pry 目前已经衍生出了很多的增强项目，如 pry-debugger，pry-remote 等等，
有时间再补充吧。</p>

<h2>参考</h2>

<ul>
<li><p><a href="http://pryrepl.org">官网</a></p></li>
<li><p><a href="https://github.com/pry/pry">pry gitub</a></p></li>
<li><p><a href="http://railscasts.com/episodes/280-pry-with-rails">railscasts</a></p></li>
<li><p><a href="http://blog.xdite.net/posts/2012/08/12/pry-the-new-debugger/">xdite的blog</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[环骑青海湖 - Day 4]]></title>
    <link href="http://thisiskun.github.com/blog/2012/08/14/cycling-in-qinghai-lake-day-four/"/>
    <updated>2012-08-14T00:26:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/08/14/cycling-in-qinghai-lake-day-four</id>
    <content type="html"><![CDATA[<h2>Day 4</h2>

<p><strong>失眠</strong> <strong>逆风</strong> <strong>上坡</strong> <strong>寒冷</strong></p>

<p>昨天小冯车子爆胎而且受伤，姑娘们决定搭车回西海镇。</p>

<p>我昨晚根本没睡好，今天起床感觉非常糟糕，但我此行的目标就是环湖，
只能硬着头皮上了。</p>

<p>简单的吃了早餐，我们出发了。</p>

<p>如果说前三天的过程是游玩，那么最后一天的过程可真是没有一点玩的意味在里面。</p>

<p>天气多云寒冷，很久了太阳也没有出来，有很多翻越山头的陡坡。
最大的问题就是今天吹着很大的逆向风，不管道路如何的变换方向，永远都是顶风前行。
我失策没有让女孩带走的背包，在我后面搭起了一张帆。</p>

<p>中途冷的不行，停下穿多一件衣服，遇见了巧克力哥，给了我半块巧克力。</p>

<p>中午也没有歇脚的地方，我在路边吃了奥利奥、面包还有非常难吃的罐头午餐肉，
喝了一罐红牛，这些都没有太大的帮助。</p>

<p>继续硬着头皮骑下去，平坦的路段逆风骑，感觉时间在流逝，而我并没有在前行。
下坡路如果不去踩，车子是会给风停住的。
上坡路段我基本就下车牵着走，有一个大山坡我走了应该有半个多小时。</p>

<p>感觉大腿就像是子弹打光了的枪，肚子也是饿的不行。</p>

<p>路过两家外面写着小卖部的店，过去敲门都是没有回应的。</p>

<p>终于在藏民家买酸奶的时候，我追上了牛肉干哥，在这里我补充了牛肉干和热水。</p>

<p>好运也就此开始，剩下的二三十公里路，我们变得顺风起来，加上补充了能量，
我又找回前面狂奔的感觉，一口气骑回了西海镇。</p>

<p>就这样，四天下来我们兜了一个圈，我也完成了我的目标，心里有一股满足感。</p>

<hr />

<p>四天的旅途是令人难忘的，如果问我此行的意义，我想就像前面引用的沙尘暴吧。
一路上我遇到许多不同的人，不同的线也因此有了交叉点，但从根本上来说，
还是一个我个人的体验。
从沙尘暴里走出来的我，可能跟以前会有一些不同。
我很高兴最后一天的坏天气，给我的旅途增加了难度。
因为最难的事总是我正在做的事情，而现在我则可以细细回味了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[环骑青海湖 - Day 3]]></title>
    <link href="http://thisiskun.github.com/blog/2012/08/14/cycling-in-qinghai-lake-day-three/"/>
    <updated>2012-08-14T00:25:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/08/14/cycling-in-qinghai-lake-day-three</id>
    <content type="html"><![CDATA[<h2>Day 3</h2>

<p><strong>精神涣散</strong></p>

<p>由于前一天也没洗成澡，加上体能消耗，大家今天起床后都显得很没精神，好在今天的路程比较短。</p>

<p>我们在鸟岛镇上吃了牛肉粉汤，本来15块钱一碗大家都觉得贵，决定吃稀饭就算了，一边跟老板哭穷，
老板主动偷偷给我们降价，哈哈。
端上来感觉物有所值，小乔不喜欢吃肉，还把肉给我，旁边开车游玩的大姐还把榨菜和花卷给我们，
我昨天是饿怕了，吃光了所有看到的东西。</p>

<p>本来起床时还觉得萎靡不振的，一骑车活动开就不一样了。
我感觉丰盛的早餐正在我胃里消化，源源不断的为我的四肢注入能量。</p>

<p>鸟岛之后的环湖西路有着此行最美的风景，在某处，湖面会变得非常的宽，这时我才体会到，
什么叫水天一色。</p>

<p>出了环湖西路就是305国道了，也是一段连绵不断的上坡，不过今天体力并不是问题。</p>

<p>音乐切换到陶喆，我边骑边跟着唱，感觉真是逍遥自在。</p>

<p>我跟牛肉干哥先到了一个小镇，我们在太阳底下聊天，等其他人。</p>

<p>等了好久都还没有到，颇为担心。</p>

<p>吃完了午饭，继续出发。</p>

<p>这时我发现我精神很难集中，刚喝的咖啡也没什么作用，可能是刚才太阳底下久坐的缘故。
剩下的路程虽然不多，骑起来却是相当辛苦，音乐开得很大声也没用。
远远的就看到目的地刚查县了，但是有一种怎么骑也不会到的感觉。
就这样晃晃悠悠的终于到了，发现原来小乔早到了，中午饭也没吃就直接骑到了刚查，
不愧是高中时的长跑健将。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[环骑青海湖 - Day 2]]></title>
    <link href="http://thisiskun.github.com/blog/2012/08/14/cycling-in-qinghai-lake-day-two/"/>
    <updated>2012-08-14T00:24:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/08/14/cycling-in-qinghai-lake-day-two</id>
    <content type="html"><![CDATA[<h2>Day 2</h2>

<p><strong>饥饿</strong> <strong>短裤</strong></p>

<p>早上醒来，感觉非常好，得有多久没睡的这么深沉了。
摸摸大腿，竟然也不痛，做到车上，屁股也没有昨天的痛感，看来这一觉我回复的太好了。</p>

<p>早餐吃了粉汤加煎蛋，我们再次上路。</p>

<p>今天我才带上耳机骑行，听的是《黑客帝国》系列的原声大碟，摇滚以及电子，听着非常带感。</p>

<p>一开始身体状态非常好，就骑在了前面。
非常不走运的路又堵住了，路过车祸现场，惨不忍睹。
小轿车的车头装的粉碎，大白布盖在驾驶坐上。</p>

<p>我小心翼翼的骑过这段，后来路终于有再次通顺起来。</p>

<p>今天穿的是短裤，事实证明是个愚蠢的决定。
每当我刚把大腿骑得发热，冷风一吹 ，马上又凉了下来，无谓的流失了热量。
昨天疲劳过度晚饭没怎么吃，早上的食物提供的能量已经消耗光了，
我已经非常饥饿了，带的干粮则是一点都不管用。</p>

<p>实在不行，跑到藏民家买了一碗酸奶，非常浓稠，一扫而光。
这东西虽然营养美味，不过吃完还是非常的饥饿。</p>

<p>找到小马的时候，他正和另一个骑友在一起，吃着他袋子里的牛肉干，我自然也不客气了。
这里就叫这位骑友牛肉干哥好了，他后来也加入到我们团队中来。</p>

<p>事实证明，牛肉干这种东西真是一剂猛药。</p>

<p>伴随一曲《Mona Lisa
Overdrive》，我发狂一般的前进，超过前面看到每个人，一路飞奔到黑马河，
感觉真是畅快无比。</p>

<p>在小镇上吃完了川菜午饭，我们骑上了环湖西路。</p>

<p>这段路非常好骑，车流少，路面质量极佳，道路也平坦。</p>

<p>最后一段我也是用力的骑，说来好笑，当时竟然萌生出要第一个到达终点的想法，
最后也是第一个到了今天的目的地鸟岛。</p>

<p>不过我们来的不是时候，鸟儿都飞到南方去了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[环骑青海湖 - Day 1]]></title>
    <link href="http://thisiskun.github.com/blog/2012/08/14/cycling-in-qinghai-lake-day-one/"/>
    <updated>2012-08-14T00:23:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/08/14/cycling-in-qinghai-lake-day-one</id>
    <content type="html"><![CDATA[<blockquote><p>某种情况下，命运这东西类似不断改变前进方向的局部沙尘暴。你变换脚步力图避开它，不料沙尘暴就像配合你似的同样变换脚步。你再次变换脚步，沙尘暴也变换脚步——如此无数次周而复始，恰如黎明前同死神一起跳的不吉利的舞。这是因为，沙尘暴不是来自远处什么地方的两不相关的什么。就是说，那家伙是你本身，是你本身中的什么。所以你能做的，不外乎乖乖地径直跨入那片沙尘暴之中，紧紧捂住眼睛耳朵以免沙尘进入，一步一步从中穿过。那里面大概没有太阳，没有月亮，没有方向，有时甚至没有时间，唯有碎骨一样细细白白的沙尘在高空盘旋——就想象那样的沙尘暴。</p>

<p>当然，实际上你会从中穿过，穿过猛烈的沙尘暴，穿过形而上的、象征性的沙尘暴。但是，它既是形而上的、象征性的，同时又将如千万把剃须刀锋利地割裂你的血肉之躯。不知有多少人曾在那里流血，你本身也会流血。温暖的鲜红的血。你将双手接血。那既是你的血，又是别人的血。</p>

<p>而沙尘暴偃旗息鼓之时，你恐怕还不能完全明白自己是如何从中穿过而得以逃生的，甚至它是否已经远去你大概都无从判断。不过有一点是清楚的：从沙尘暴中逃出的你已不再是跨入沙尘暴时的你。是的，这就是所谓沙尘暴的含义。</p>

<p><strong>《海边的卡夫卡》</strong></p></blockquote>

<h2>Day 1</h2>

<p><strong>抽筋</strong> <strong>绝望之路</strong></p>

<p>吃完没有牛肉的牛肉面早餐，一行人就从西海镇出发了。
前一天试骑的时候还没有什么感觉，今天敷包加大背包，骑起来才感觉到如此吃力。
一开始还打算把背包背着，后面还是绑在了车后。</p>

<p>不久就看到了此行的第一片油菜花田。</p>

<p>前面的路并不好骑，一开始就是很多的上坡路。
骑着骑着，车子也开始发出卡拉卡拉的声音了，昨天的变速问题还没有修好，
真是不走运。</p>

<p>之后遇到一个非常长的下坡路，一路飘着下去，两边的风景也开阔起来，
远处有青色的湖水，还有湛蓝的天空，整个人都清爽起来了。
我在一个可以骑马的小牧场边停了下来，因刚才的长距离滑行感到非常兴奋，
但这时候才发现大腿已经在抽筋了。
长期缺乏运动，突然遭受如此的冲击，大腿已经在跟我抗议了。
休息片刻后我又再次出发了，大腿肌肉还是在隐隐的抽搐着，
我想起了《老人与海》里对老人抽筋的左手的描写，当时颇觉不可思议，
并且为抽筋的大腿能不能胜任工作感到担忧。
事实证明担忧是多余的，大腿很快就失去知觉，用意念去驱动它就可以了。</p>

<p>中午时候我们在湖边的一片草地上休息，吃了奥利奥、香蕉还有可口的黄瓜。
可以看到鸟飞在湖面上，应该是在捕鱼吧。
小马说在这里盖栋别墅就爽了。</p>

<p>下午就上了109国道，路上车比较多，所以都是专心的沿着路边骑的。
途中跟小马还有小乔下到湖边玩。</p>

<p>半路上堵车了，原来前面发生车祸了，我们骑自行车机动性较高，快速通过。</p>

<p>后面的路就非常难骑了，连绵不断的上坡路。
每次希望骑到上坡的顶点能遇到一个下坡，但是是不可能的。
身体极度的渴望休息，但天色已晚，151也还没到，只能继续麻木地骑下去。
经过一个路碑，上面涂鸦着“已死”，绝望啊绝望。</p>

<p>终于在夕阳西下之时，来到了一个安静的小镇。
一问才知道我们已经到了江西沟，151在路上发生车祸的那段，真是柳暗花明又一村。</p>

<p>晚上吃饭前小马说要买烟，我本来都戒了的，累个半死，抽上一根烟还真是爽得不得了。</p>

<p>跟早到了的小末和小冯吃完晚饭就回去睡觉了，澡是没得洗的，暗自祈祷明天能起得来后，
我睡死了过去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的vim]]></title>
    <link href="http://thisiskun.github.com/blog/2012/07/09/my-vim/"/>
    <updated>2012-07-09T16:50:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/07/09/my-vim</id>
    <content type="html"><![CDATA[<p>使用vim 也有一阵子了，感觉手感已经烧录进我的手指了，一旦拥有，很难回头去用其他的了。</p>

<p>下面是我的vim 的一些配置，你可以在github 上找到
<a href="https://github.com/thisiskun/dotvim">它</a>。</p>

<h2>同步备份vim配置</h2>

<p>vim 的配置文件默认是<code>～/.vim/</code> 以及<code>~/.vimrc</code> 和<code>~/.gvimrc</code>，github 在
建立一个repo， 不仅可以方便的同步备份，还可以跟别人分享你的配置。</p>

<h2>插件管理vundle</h2>

<p>感谢pathogen 和vundle 这样的插件，让vim 插件管理起来是如此的轻松。
经过对比，最后还是选用vundle，pathogen 采用的是git
submodule，总是没那么好用。
vundle 使用起来跟bundle
十分的相似，一个配置文件（vimrc），几个命令（<code>BundleInstall(!)</code>，<code>BundleClean(1)</code>）
就搞定。
vundle 可以从github，vim.org或者指定git repo上同步插件。
如果你使用github 管理<code>.vim</code> 目录，那记得在<code>.gitignore</code> 中加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle<span class="se">\</span>
</span></code></pre></td></tr></table></div></figure>


<h2>更好的snipmate</h2>

<p>snipmate 提供了很好的代码补全功能，scrooloose 提供了更好的
<a href="https://github.com/thisiskun/snipmate-snippets.git">snippets</a>。
fork 这个项目，然后加入vundle
的插件列表中，这样就可以方便的管理扩展这些snippets 了。
最后在vimrc 中设置snippets 的目录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> g:snippets_dir<span class="p">=</span><span class="s2">&quot;~/.vim/bundle/snipmate-snippets/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>快速安装脚本</h2>

<p>虽然按照前面的设定，要在一台新机器上同步vim 配置很方便，
但是写一个脚本还是比Ctrl-c Ctrl-v 来的方便。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:thisiskun/dotvim.git ~/.vim
</span></code></pre></td></tr></table></div></figure>


<p>运行<code>setup.sh</code> 脚本：</p>

<figure class='code'><figcaption><span>setup.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># setup rc files</span>
</span><span class='line'>ln -s ~/.vim/vimrc ~/.vimrc
</span><span class='line'>ln -s ~/.vim/gvimrc ~/.gvimrc
</span><span class='line'>
</span><span class='line'><span class="c"># back and undo directory</span>
</span><span class='line'>mkdir ~/.vimbackup
</span><span class='line'>mkdir ~/.vimundodir
</span><span class='line'>
</span><span class='line'><span class="c"># setup vundle</span>
</span><span class='line'>git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
</span><span class='line'>vim +BundleInstall +qa
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>参考：</p>

<ul>
<li><p><a href="http://stevelosh.com/blog/2010/09/coming-home-to-vim/">coming home to vim</a></p></li>
<li><p><a href="http://vimcasts.org/">vimcasts.org</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ack, Better Than Grep]]></title>
    <link href="http://thisiskun.github.com/blog/2012/07/07/ack_better_than_grep/"/>
    <updated>2012-07-07T18:33:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/07/07/ack_better_than_grep</id>
    <content type="html"><![CDATA[<p>首先吐槽下ack 的域名，直接是<a href="http://betterthangrep.com">http://betterthangrep.com</a> ，
这让grep 情何以勘。。。</p>

<h2>什么是ack</h2>

<p>ack 是一个类似于grep 并为程序员专门优化过的字符串搜索工具。</p>

<h2>安装ack</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># for ubuntu</span>
</span><span class='line'>sudo apt-get install ack-grep
</span></code></pre></td></tr></table></div></figure>


<p>因为已经有一个软件叫ack 了，所以可以：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">ack</span><span class="o">=</span><span class="s2">&quot;ack-grep&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Why ack?</h2>

<ul>
<li><p>快速</p>

<p>ack 只搜索必需的文件。</p></li>
<li><p>更好的搜索</p>

<p>ack 默认忽略了SVN Git 以及其他版本控制系统的非源代码文件。</p></li>
<li><p>为源代码搜索而设计</p>

<p>不同于搜索文本的grep，ack 是专门搜索源代码的。</p></li>
<li><p>高度的可移植性</p>

<p>ack 是纯正的perl 脚本，可以在安装了perl 的windows 上运行。</p></li>
<li><p>免费开源</p></li>
</ul>


<h2>小技巧</h2>

<ul>
<li><p><code>--smart-case</code>，与vim的<code>smartcase</code> 类似，查找字符串全部小写着忽略大小写。</p></li>
<li><p><code>-a</code> 查找全部文件，因ack 为
为提高速度而忽略掉一些文件，所以有时有必要加上这个选项，
最常见的就是查找ruby 的某些文件，因为很多不能被识别为源代码文件。</p></li>
<li><p><code>-Q</code> 省去表达式中转义的麻烦。</p></li>
<li><p><code>--ruby</code> 只查找ruby 文件，类似的有<code>--perl</code>。</p></li>
<li><p><code>show-types</code> 显示文件类型。</p></li>
</ul>


<p>更多的可以<code>--help</code> 查看。</p>

<h2>ack.vim</h2>

<p>vim 插件，可以于github <a href="https://github.com/mileszs/ack.vim.git">下载</a>。</p>

<p>.vimrc 中加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> g:ackprg<span class="p">=</span><span class="s2">&quot;ack-grep -H --nocolor --nogroup --column&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我喜欢加入<code>--smart-case</code>。</p>

<p>之后在vim 中可以用Ack 等几个命令查找，结果会显示在quickfix list 中，
非常方便。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux折腾记]]></title>
    <link href="http://thisiskun.github.com/blog/2012/05/09/zheteng-linux/"/>
    <updated>2012-05-09T11:35:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/05/09/zheteng-linux</id>
    <content type="html"><![CDATA[<p>工欲善其事，必先利其器，想成为一个更好的code，开发环境当然是linux 了
（mac 没用过，穷逼买不起）。
趁着ubuntu 12.04发布之际，赶紧装上体验一把。
以下是折腾过程的记录，流水帐。</p>

<h2>安装ubuntu</h2>

<p>新硬盘一颗，刻碟，装上。
没有装windows 双系统，为什么呢？我会告诉你我很懒吗？</p>

<p>默认是gnome 桌面系统，还有unity，用起来感觉就是，别扭。
所以就安装了kde 桌面，</p>

<h2>安装kde</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install kubuntu-desktop
</span></code></pre></td></tr></table></div></figure>


<p>这也是我第一次接触kde 桌面，一开始感觉开机慢了，还不太习惯，而且由于双显卡驱动没装好，
特效开启不了，感觉很不爽啊。</p>

<h2>正确安装双显卡驱动</h2>

<p>我用的笔记本是hp 的dv3-4042tx，外观山寨苹果，不过工业设计吗，很多不合理的地方。
usb 接口只有两个，都在右边，而且靠的非常近。
另外要说的就是触摸板，一体化的触摸板，两个按键跟触摸区域无缝相连的，触摸区域大了没错，
不错按键手感就非常糟糕，还经常出现按键失灵的情况。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lspci | grep VGA
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>00:02.0 VGA compatible controller: Intel Corporation Core Processor Integrated Graphics Controller <span class="o">(</span>rev 02<span class="o">)</span>
</span><span class='line'>01:00.0 VGA compatible controller: Advanced Micro Devices <span class="o">[</span>AMD<span class="o">]</span> nee ATI Manhattan <span class="o">[</span>Mobility Radeon HD 5400 Series<span class="o">]</span> <span class="o">(</span>rev ff<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到是intel 的集成显卡和ati独立显卡，装好了系统之后显示效果就一直不好，特效什么的也开不了，
所以就google 怎么正确的安装驱动，参考了这篇帖子。  <br/>
<a href="http://forum.ubuntu.com.cn/viewtopic.php?f=42&amp;t=350772">http://forum.ubuntu.com.cn/viewtopic.php?f=42&amp;t=350772</a></p>

<p>按照该帖的指导，并没有成功安装ati的闭源驱动，开机无法启动图形界面了，无奈只好卸载重启。
没想到重新开机，特效什么的全都出来了！柳暗花明又一村，有木有！</p>

<p>现在猜想，可能是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo sh /usr/share/ati/fglrx-uninstall.sh
</span><span class='line'>sudo apt-get remove --purge fglrx fglrx_* fglrx-amdcccle* fglrx-dev*
</span></code></pre></td></tr></table></div></figure>


<p>这里把ubuntu 安装的驱动给卸载了，所以就没有安装ati 显卡的驱动了，
而intel 的显卡则正常工作，特效什么的毫无压力，所以就正常了。</p>

<h2>关闭独立显卡</h2>

<p>现在集成显卡正常工作了，但是两块显卡其实都是通电的，温度有点高，而且不节能环保啊。
参照这里搞定。     <br/>
<a href="http://linuxtoy.org/archives/how-to-use-vga-switcheroo-disable-video-card-linux-kms.html">http://linuxtoy.org/archives/how-to-use-vga-switcheroo-disable-video-card-linux-kms.html</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /sys/kernel/debug/vgaswitcheroo/switch
</span></code></pre></td></tr></table></div></figure>


<p>输出大致如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0:IGD:+:Pwr:0000:00:02.0
</span><span class='line'>1:DIS: :Pwr:0000:01:00.0
</span></code></pre></td></tr></table></div></figure>


<p>两个都是Pwr。</p>

<p>编辑/etc/rc.local：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chown yourname /sys/kernel/debug/vgaswitcheroo/switch
</span><span class='line'><span class="nb">echo </span>ON &gt; /sys/kernel/debug/vgaswitcheroo/switch
</span><span class='line'><span class="nb">echo </span>IGD &gt; /sys/kernel/debug/vgaswitcheroo/switch
</span><span class='line'><span class="nb">echo </span>OFF &gt; /sys/kernel/debug/vgaswitcheroo/switch
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>ok,重启，可以看到独立显卡一项是Off 的了。</p>

<h2>设置fcitx</h2>

<p>输入法使用的是fcitx，发现在konsole 和rekonq 下无法激活，
搜索了下，发现网上很多问这问题的，后来在官方wiki 上找到解决方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install qt4-qtconfig
</span><span class='line'>sudo qtconfig
</span></code></pre></td></tr></table></div></figure>


<p>运行qtconfig (名称可能根据你的发行版有所不同)，选择第三个标签，确认fcitx 是在默认输入法组合框中中。</p>

<h2>oh-my-zsh</h2>

<p>这个Ryan Bates 大神在railcasts 上介绍过了，默认配置就很好用了，
有特殊需求可以进一步折腾。</p>

<h2>ruby &amp; rails</h2>

<p>速配参考ruby-china 的<a href="http://ruby-china.org/wiki/install_ruby_guide">wiki 文档</a>，
ruby当然是用rvm来装了，如果报<code>rvm is not a funciotn</code>，
把终端改为login-shell，并确保正确加载<code>~/,bash_profile</code>和<code>~/.bashrc</code>
另外</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install libsqlite3-dev
</span><span class='line'>sudo apt-get install nodejs
</span></code></pre></td></tr></table></div></figure>


<p>可以让你的第一个rails demo 跑起来。</p>

<h2>git &amp; github</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global user,name yourname
</span><span class='line'>git config --global user.email youremail
</span><span class='line'>git config --global core.editor vi
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -t rsa -C <span class="s2">&quot;your_email@youremail.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后将生成的ssh 公钥传到github 就好了。</p>

<h2>vim</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~
</span><span class='line'>git clone git@github.com:thisiskun/dotvim.git ~/.vim
</span><span class='line'>ln -s ~/.vim/vimrc ~/.vimrc
</span><span class='line'>ln -s ~/.vim/gvimrc ~/.gvimrc
</span><span class='line'>mkdir ~/.vimbackup
</span><span class='line'>mkdir ~/.vimundodir
</span><span class='line'><span class="nb">cd</span> ~/.vim
</span><span class='line'>git submodule init
</span><span class='line'>git submodule update
</span></code></pre></td></tr></table></div></figure>


<p>不fork 一下吗？</p>

<h2>好软件</h2>

<ul>
<li><strong>Guake</strong> 快捷下拉终端，超级方便啊</li>
<li><strong>krunner</strong> alt-f2调出，感觉跟window的win+r差不多，这个软件很低调，找半天才找到名字</li>
<li><strong>amaorok</strong> 音乐播放软件，用户体验很赞，logo超帅，不过貌似中文支持不太好</li>
<li><strong>dolphin</strong> 文件管理软件</li>
<li><strong>konsole</strong> 终端，多套配置可选，方便添加书签</li>
<li><strong>firefox</strong> 这个说来话长</li>
</ul>


<h2>the end</h2>

<p>终于把linux 桌面环境配置的比较顺手了，折腾就是一个这样的过程：
每当你想，没辙了，其实，再转个弯就到了。
总体感觉，kde 桌面非常棒，完爆gonme。
之前有装过archlinux，感觉在知其所以然的情况下，用archlinux 应该会更好更方便，
配置简洁明了，滚动升级非常诱人，不过更适合熟手来折腾。
好了，折腾了那么多，是时候静下心来，干点正事了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Gems]]></title>
    <link href="http://thisiskun.github.com/blog/2012/04/06/ruby-gems/"/>
    <updated>2012-04-06T14:54:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/04/06/ruby-gems</id>
    <content type="html"><![CDATA[<p>这里是我对rubygems的学习记录和自己的一些理解。</p>

<h2>什么是rubygems gems</h2>

<p><a href="https://rubygems.org/">rubygems</a>是ruby的一个包管理系统，gem是ruby的软件包。</p>

<p>上篇日志讲到了<code>$LOAD_PATH</code>，其实rubygems的实现也是通过<code>$LOAD_PATH</code>的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">pp</span> <span class="vg">$:</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/i686-linux&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1/i686-linux&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/i686-linux&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们来<code>require</code>一个gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;rdiscount&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">004</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">pp</span> <span class="vg">$:</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;/home/kun/.rvm/gems/ruby-1.9.2-p290@rails3.2.1/gems/rdiscount-1.6.8/lib&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/i686-linux&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1/i686-linux&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/i686-linux&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上，<code>rdiscount</code>这个gem的lib目录已经加入到<code>$LOAD_PATH</code>中了，可以很方便的<code>require</code>了。</p>

<h2>建立自己的gem</h2>

<h3>使用bundler</h3>

<p>这里我用<code>bundler</code>来生成gem结构，其他实现不太清楚。</p>

<p>生成gem结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle gem hola
</span></code></pre></td></tr></table></div></figure>


<p>目录结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>└── hola
</span><span class='line'>    ├── lib
</span><span class='line'>    │   ├── hola
</span><span class='line'>    │   │   └── version.rb
</span><span class='line'>    │   └── hola.rb
</span><span class='line'>    ├── Gemfile
</span><span class='line'>    ├── hola.gemspec
</span><span class='line'>    ├── LICENSE
</span><span class='line'>    ├── Rakefile
</span><span class='line'>    └── README.md
</span></code></pre></td></tr></table></div></figure>


<p><code>bundler</code>生成的gem结构已经很符合gem的约定规范了，
而且还自动建立个git repo，
用起来很舒服。</p>

<h3>lib/</h3>

<p>lib目录是我们的代码所在目录，当我们install了这个gem，
当我们<code>require 'hola'</code>时，就是<code>require</code>了这里的<code>hola.rb</code>，
所以需要的其他文件，都要在<code>hola.rb</code>里面<code>require</code>进来。</p>

<h3>Gemfile</h3>

<p><code>Gemfile</code>是bundler的配置文件</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Specify your gem&#39;s dependencies in hola.gemspec</span>
</span><span class='line'><span class="n">gemspec</span>
</span></code></pre></td></tr></table></div></figure>


<p>如提示，我们应该把软件包依赖写在<code>hola.gemspec</code>里面。</p>

<h3>hola.gemspec</h3>

<p>gem描述文件</p>

<figure class='code'><figcaption><span>hola.gemspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding: utf-8 -*-</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../lib/hola/version&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">gem</span><span class="o">|</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">authors</span>       <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Arthur Chen&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">email</span>         <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;chenchaokun@gmail.com&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">description</span>   <span class="o">=</span> <span class="sx">%q{TODO: Write a gem description}</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">summary</span>       <span class="o">=</span> <span class="sx">%q{TODO: Write a gem summary}</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">homepage</span>      <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">files</span>         <span class="o">=</span> <span class="sb">`git ls-files`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="vg">$\</span><span class="p">)</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">executables</span>   <span class="o">=</span> <span class="n">gem</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">%r{^bin/}</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">test_files</span>    <span class="o">=</span> <span class="n">gem</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">%r{^(test|spec|features)/}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">name</span>          <span class="o">=</span> <span class="s2">&quot;hola&quot;</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">require_paths</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;lib&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">version</span>       <span class="o">=</span> <span class="no">Hola</span><span class="o">::</span><span class="no">VERSION</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体看<a href="http://guides.rubygems.org/specification-reference/">官方文档</a>就好了。</p>

<h3>Rakefile</h3>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env rake</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;bundler/gem_tasks&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># rake -T</span>
</span><span class='line'>rake build    <span class="c"># Build hola-0.0.1.gem into the pkg directory</span>
</span><span class='line'>rake install  <span class="c"># Build and install hola-0.0.1.gem into system gems</span>
</span><span class='line'>rake release  <span class="c"># Create tag v0.0.1 and build and push hola-0.0.1.gem to Rubygems</span>
</span></code></pre></td></tr></table></div></figure>


<p>三个好用的task。</p>

<h3>添加可执行脚本</h3>

<p>按照惯例，可执行脚本放在<code>bin/</code>目录下，脚本命名一般跟gem一样，
如<code>bin/hola</code>，
ruby构建命令行工具比较流行的有<code>rake</code>和<code>thor</code>，
后续应该有相关的博文。</p>

<h3>test</h3>

<p>unittest或者rspec，相应的测试代码放在<code>test/</code> <code>sepc/</code>下。</p>

<h2>publishing</h2>

<p>先<code>git commit</code>，
也可以<code>git remote add</code>将项目托管到github。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake install
</span><span class='line'>rake release
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以把你的gem发布到<a href="https://rubygems.org/">rubygems.org</a>上了，
记得注册。。。
api key，
以及检查gem名是否可用。</p>

<h2>最后</h2>

<p>现在你<code>gem list -r your_gem</code>，就可以看到你的gem了，
全球各地的黑客们就可以很愉快的下载使用你的gem了，
你为开源世界又贡献了一个helloworld，
是不是有一股满足感油然而生呢：）。</p>

<p>参考：</p>

<ul>
<li><a href="http://guides.rubygems.org/" title="rubygems guides">rubygems guides</a></li>
<li><a href="http://railscasts.com/episodes/245-new-gem-with-bundler" title="railcasts">railscasts: new gem with bundler</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby的$LOAD_PATH]]></title>
    <link href="http://thisiskun.github.com/blog/2012/03/30/rubys-load-path/"/>
    <updated>2012-03-30T00:22:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/03/30/rubys-load-path</id>
    <content type="html"><![CDATA[<p>在ruby中，当你<code>require</code>一个文件的时候，
ruby去哪里寻找这个文件呢？
答案就是<code>$LOAD_PATH</code>了。
<code>$LOAD_PATH</code>还有另外一种perl风格的别名<code>$:</code>，
而且貌似这种写法更加常见，
虽然让人摸不着头脑就是了。</p>

<p>假设在<code>~/test</code>路径下，
有<code>foo.rb</code>和<code>bar.rb</code>，
在ruby 1.9.2 之前的版本里，
执行脚本的目录是加入到<code>$LOAD_PATH</code>里的，
所以你可以</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bar.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;foo&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby 1.9.2 之后的版本里，
出于安全的考虑，
不再包含当前目录，
所以上面的写法会出错，
所以相应的代码应该改为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bar.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./foo&#39;</span>
</span><span class='line'><span class="c1"># or</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;foo&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>require './foo'</code>是当前目录相对文件的路径，
<code>require_relative</code>的意思是，
<strong>包含这句代码的文件与目标文件的相对路径</strong>。
下面是<a href="http://stackoverflow.com/questions/4333286/ruby-require-vs-require-relative-best-practice-to-workaround-running-in-both">stackoverflow</a>上的一段兼容1.9.2之前版本的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">unless</span> <span class="no">Kernel</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:require_relative</span><span class="p">)</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Kernel</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">require_relative</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="nb">caller</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">),</span> <span class="n">path</span><span class="o">.</span><span class="n">to_str</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>回到<code>$LOAD_PATH</code>，让我们看看它的值，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/i686-linux&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby/1.9.1/i686-linux&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/vendor_ruby&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;/home/kun/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/i686-linux&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面的方法可以将目录动态加入<code>$LOAD_PATH</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../lib&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为ruby以第一个找到的为准，
所以用unshift，可以提高些许效率。</p>

<hr />

<p>最后，一点小发现，
rspec是会自动加载<code>lib/</code>和<code>spec/</code>的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Octopress搭建blog]]></title>
    <link href="http://thisiskun.github.com/blog/2012/03/24/how-to-build-a-blog-with-octopress/"/>
    <updated>2012-03-24T17:44:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/03/24/how-to-build-a-blog-with-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a>是一个静态的blog系统，
虽然副标题是“A blogging framework for hackers”，
其实只要稍微折腾下，搭建一个blog还是分分钟的事。
以下记录我是如何搭建这个blog的。</p>

<h2>准备工作</h2>

<ul>
<li>安装<a href="http://www.ruby-lang.org/en/">ruby</a>，Octopress需要的是1.9.2版本，
在ubuntu下使用<a href="http://beginrescueend.com/">rvm</a>安装ruby是不二选择，可以方便的管理ruby以及rails的版本。</li>
<li>安装<a href="http://git-scm.com/">git</a>，在此不多描述。</li>
<li>一个<a href="http://github.com">Github</a>帐号，我是部署在github pages上的。
什么！你还没有Github帐号？赶紧去注册个吧～～</li>
</ul>


<h2>安装Octopress</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/imathis/octopress.git my_blog
</span><span class='line'><span class="nb">cd </span>my_blog
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure>


<h2>基本配置</h2>

<p>配置主要看<code>_config.yml</code>文件，一些基本的选项，注释里写得清晰易懂。
最sexy的一点就是第三方插件了。
Octopress是个静态的blog系统，使用<a href="http://thisiskun.disqus.com/">Disqus Comments</a>可以很方便的加入评论功能，
缺点是使用了javasctipt，对搜索引擎不太友好。
使用<a href="http://www.google.com/analytics/">Google Analytics</a>可以很方便的进行统计分析。</p>

<h2>部署到Github Pages</h2>

<p>假设你的Github帐号是foobar，那么新建一个repository，
name填<code>foobar.github.com</code>。</p>

<p>然后生成并部署。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake setup_github_pages
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p><code>rake deploy</code>的时候会询问你repository url，
填入<code>git@github.com:foobar/foobar.github.com.git</code> 即可。</p>

<p>最后不要忘记提交到Github上。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s2">&quot;your message&quot;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在访问<code>http://foobar.github.com</code>看看,是不是有了。</p>

<p>这里说下原来搞得我比较迷惑的地方。部署完毕后，
本地会有两个git branch，master跟source，
我们只需要提交source分支即可，master分支我想是本地备份之用。
另外提交到Github的master分支，是本地source下_deploy目录的master分支，
说起来可能比较绕口，
不过看看<code>Rakefile</code>应该会比较明白的。</p>

<p>当然Octopress也可以很方便的部署到gh-pages或者<a href="http://www.heroku.com/">heroku</a>，<a href="http://octopress.org/">官网</a>上都有详细的说明。</p>

<h2>Blogging basic</h2>

<p>Octopress会为你的blog生成<code>/atom.xml</code>或者
<code>/blog/catagories/&lt;category&gt;/atom.xml</code>。</p>

<h3>Blog posts</h3>

<p>Octopress默认是使用markdown语法，simple and easy。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s1">&#39;your title&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就生成一篇新的post在你的<code>source/_post</code>目录下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>layout: post
</span><span class='line'>title: <span class="s2">&quot;your title&quot;</span>
</span><span class='line'>date: 2012-03-24 5:59
</span><span class='line'>comments: <span class="nb">true</span>
</span><span class='line'>categories:
</span></code></pre></td></tr></table></div></figure>


<p>你可以很方便的修改这些属性，比如multiple categories。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>categories: octopress <span class="c"># one category</span>
</span><span class='line'>
</span><span class='line'>categories: <span class="o">[</span>octopress, blog<span class="o">]</span> <span class="c"># multiple catagories example 1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># multiple catagories example 2</span>
</span><span class='line'>catagories:
</span><span class='line'>- octopress
</span><span class='line'>- blog
</span></code></pre></td></tr></table></div></figure>


<p>如果你不想公开发布一篇post，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>published: <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>就可以了。</p>

<h3>New pages</h3>

<p>添加一个新页面也是很简单的，这里我们来添加一个<code>about</code>页面好了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_page<span class="o">[</span>about<span class="o">]</span>
</span><span class='line'><span class="c"># creates /source/about/index.markdown</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过<code>root_url/about</code>就可以访问到这个页面了，下一步我们把他添加到导航栏。</p>

<figure class='code'><figcaption><span>source/_includes/custom/navigation.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main-navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/about&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>刷新下，<code>about</code>页面是不是出来了？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span><span class='line'>rake push
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>最后</h2>

<p>总体而言，Octopress搭建、部署、配置和写blog都是十分的方便简单，一个字“爽”！</p>

<h3>参考</h3>

<ul>
<li><a href="http://octopress.org/">Octopress官网</a></li>
<li><a href="http://daringfireball.net/projects/markdown/">markdown（英文）</a></li>
<li><a href="http://markdown.tw/">markdown（中文）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress!]]></title>
    <link href="http://thisiskun.github.com/blog/2012/03/22/hello-octopress/"/>
    <updated>2012-03-22T22:42:00+08:00</updated>
    <id>http://thisiskun.github.com/blog/2012/03/22/hello-octopress</id>
    <content type="html"><![CDATA[<p>Hello Octopress!</p>

<p>This is my first post!</p>

<p>关闭输入法的自动嵌入才能才gvim里正常输入中文，迟来的中文问候，囧～～</p>

<p>你好，Octopress！</p>
]]></content>
  </entry>
  
</feed>
